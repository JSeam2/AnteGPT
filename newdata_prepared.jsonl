{"prompt":"for WETH to check if WETH is fully backed by ETH. This is the WETH9 contract used. \n\npragma solidity ^0.4.18;\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n###\n\n","completion":" pragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\";\nimport \"..\/AnteTest.sol\";\n\n\ncontract AnteWETH9Test is AnteTest(\"Checks WETH9 issued WETH fully backed by ETH\") {\n    address public immutable wETH9Addr;\n\n    IERC20 public wETH9Token;\n\n    constructor(address _wETH9Addr) {\n        wETH9Addr = _wETH9Addr;\n        wETH9Token = IERC20(_wETH9Addr);\n\n        protocolName = \"WETH9\";\n        testedContracts = [_wETH9Addr];\n    }\n\n    function checkTestPasses() external view override returns (bool) {\n        return address(wETH9Token).balance == wETH9Token.totalSupply();\n    }\n}\n\n###\n"}
{"prompt":"that checks if MetaStreet Vault's Junior Tranche is solvent. This is the MetaStreet Vault contract used.\n\ncontract Vault {\n\n    constructor() initializer {}\n\n    function initialize(\n        string memory name_,\n        IERC20 currencyToken_,\n        ILoanPriceOracle loanPriceOracle_,\n        LPToken seniorLPToken_,\n        LPToken juniorLPToken_\n    ) external initializer {\n        if (address(currencyToken_) == address(0)) revert InvalidAddress();\n        if (address(loanPriceOracle_) == address(0)) revert InvalidAddress();\n        if (address(seniorLPToken_) == address(0)) revert InvalidAddress();\n        if (address(juniorLPToken_) == address(0)) revert InvalidAddress();\n\n        if (IERC20Metadata(address(currencyToken_)).decimals() != 18) revert UnsupportedTokenDecimals();\n\n        __AccessControl_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        _name = name_;\n        _currencyToken = currencyToken_;\n        _loanPriceOracle = loanPriceOracle_;\n        _seniorLPToken = seniorLPToken_;\n        _juniorLPToken = juniorLPToken_;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(EMERGENCY_ADMIN_ROLE, msg.sender);\n    }\n\n    function trancheState(\n        TrancheId trancheId\n    )\n        external\n        view\n        returns (\n            uint256 realizedValue,\n            uint256 estimatedValue,\n            uint256 pendingRedemptions,\n            uint256 redemptionQueue,\n            uint256 processedRedemptionQueue,\n            uint256 depositSharePrice,\n            uint256 redemptionSharePrice_\n        )\n    {\n        Tranche storage tranche = _trancheState(trancheId);\n        return (\n            tranche.realizedValue,\n            _computeEstimatedValue(trancheId),\n            tranche.pendingRedemptions,\n            tranche.redemptionQueue,\n            tranche.processedRedemptionQueue,\n            _computeSharePrice(trancheId),\n            _computeRedemptionSharePrice(trancheId)\n        );\n    }\n\n}\n\n\n\n\n###\n\n","completion":" pragma solidity ^0.8.0;\n\nimport \"..\/AnteTest.sol\";\n\ninterface IVaultAbridged {\n    enum TrancheId {\n        Senior,\n        Junior\n    }\n\n    function trancheState(TrancheId trancheId)\n        external\n        view\n        returns (\n            uint256 realizedValue,\n            uint256 estimatedValue,\n            uint256 pendingRedemptions,\n            uint256 redemptionQueue,\n            uint256 processedRedemptionQueue,\n            uint256 depositSharePrice,\n            uint256 redemptionSharePrice_\n        );\n}\n\n\/\/ @title MetaStreet Vault Junior Tranche Solvency Test\n\/\/ @notice Ante Test to check if a MetaStreet Vault's junior tranche is solvent\ncontract AnteMetaStreetVaultSolvencyTest is AnteTest(\"Ensure that a MetaStreet Vault's Junior Tranche is solvent\") {\n    IVaultAbridged private vault;\n\n    constructor(address _vault) {\n        protocolName = \"MetaStreet\";\n        testedContracts.push(_vault);\n\n        vault = IVaultAbridged(_vault);\n    }\n\n    \/\/ @notice Check if a Vault's junior tranche is solvent\n    \/\/ @return true if Vault's junior tranche is solvent, otherwise false\n    function checkTestPasses() external view override returns (bool) {\n        (uint256 realizedValue, , uint256 pendingRedemptions, , , , ) = vault.trancheState(\n            IVaultAbridged.TrancheId.Junior\n        );\n\n        return realizedValue >= pendingRedemptions;\n    }\n}\n\n###\n"}
