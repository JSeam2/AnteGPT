{"prompt":"Ribbon Multisig RBN balance remains >=1m\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\n\/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n *\/\ninterface IERC20 {\n    \/**\n     * @dev Returns the amount of tokens in existence.\n     *\/\n    function totalSupply() external view returns (uint256);\n\n    \/**\n     * @dev Returns the amount of tokens owned by `account`.\n     *\/\n    function balanceOf(address account) external view returns (uint256);\n\n    \/**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     *\/\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \/**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     *\/\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \/**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https:\/\/github.com\/ethereum\/EIPs\/issues\/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     *\/\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \/**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     *\/\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \/**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     *\/\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \/**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     *\/\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    \/**\n     * @dev Returns the name of the token.\n     *\/\n    function name() external view returns (string memory);\n\n    \/**\n     * @dev Returns the symbol of the token.\n     *\/\n    function symbol() external view returns (string memory);\n\n    \/**\n     * @dev Returns the decimals places of the token.\n     *\/\n    function decimals() external view returns (uint8);\n}\n\n\n\/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n *\/\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; \/\/ silence state mutability warning without generating bytecode - see https:\/\/github.com\/ethereum\/solidity\/issues\/2691\n        return msg.data;\n    }\n}\n\n\/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https:\/\/forum.zeppelin.solutions\/t\/how-to-implement-erc20-supply-mechanisms\/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n *\/\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    \/**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     *\/\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    \/**\n     * @dev Returns the name of the token.\n     *\/\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    \/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     *\/\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    \/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 \/ 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     *\/\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    \/**\n     * @dev See {IERC20-totalSupply}.\n     *\/\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    \/**\n     * @dev See {IERC20-balanceOf}.\n     *\/\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    \/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     *\/\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \/**\n     * @dev See {IERC20-allowance}.\n     *\/\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \/**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     *\/\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    \/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     *\/\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    \/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     *\/\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    \/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     *\/\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    \/**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     *\/\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     *\/\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    \/**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     *\/\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    \/**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\/\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \/**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     *\/\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n\/**\n * @dev String operations.\n *\/\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    \/**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     *\/\n    function toString(uint256 value) internal pure returns (string memory) {\n        \/\/ Inspired by OraclizeAPI's implementation - MIT licence\n        \/\/ https:\/\/github.com\/oraclize\/ethereum-api\/blob\/b42146b063c7d6ee1358846c198246239e9360e8\/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp \/= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value \/= 10;\n        }\n        return string(buffer);\n    }\n\n    \/**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     *\/\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    \/**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     *\/\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n\n\n\n\/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n *\/\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address account) external;\n}\n\ninterface IERC165 {\n    \/**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https:\/\/eips.ethereum.org\/EIPS\/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     *\/\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\nabstract contract ERC165 is IERC165 {\n    \/**\n     * @dev See {IERC165-supportsInterface}.\n     *\/\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n *\/\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping (address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    \/**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     *\/\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    \/**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     *\/\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    \/**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     *\/\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    \/**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  \/^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$\/\n     *\n     * _Available since v4.1._\n     *\/\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    \/**\n     * @dev See {IERC165-supportsInterface}.\n     *\/\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    \/**\n     * @dev Returns `true` if `account` has been granted `role`.\n     *\/\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    \/**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  \/^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$\/\n     *\/\n    function _checkRole(bytes32 role, address account) internal view {\n        if(!hasRole(role, account)) {\n            revert(string(abi.encodePacked(\n                \"AccessControl: account \",\n                Strings.toHexString(uint160(account), 20),\n                \" is missing role \",\n                Strings.toHexString(uint256(role), 32)\n            )));\n        }\n    }\n\n    \/**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     *\/\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    \/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\/\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    \/**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\/\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    \/**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\/\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    \/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\/\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    \/**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     *\/\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n\n\n\/**\n * RIBBON FINANCE: STRUCTURED PRODUCTS FOR THE PEOPLE\n *\/\ncontract RibbonToken is AccessControl, ERC20 {\n    \/\/\/ @dev The identifier of the role which maintains other roles.\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n    \/\/\/ @dev The identifier of the role which allows accounts to mint tokens.\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\");\n    \/\/\/ @dev The identifier of the role which allows special transfer privileges.\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER\");\n\n    \/\/\/ @dev bool flag of whether transfer is currently allowed for all people.\n    bool public transfersAllowed = false;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply,\n        address beneficiary\n    ) ERC20(name, symbol) {\n        \/\/ We are minting initialSupply number of tokens\n        _mint(beneficiary, totalSupply);\n        \/\/ Add beneficiary as minter\n        _setupRole(MINTER_ROLE, beneficiary);\n        \/\/ Add beneficiary as transferer\n        _setupRole(TRANSFER_ROLE, beneficiary);\n        \/\/ Add beneficiary as admin\n        _setupRole(ADMIN_ROLE, beneficiary);\n        \/\/ Set ADMIN role as admin of transfer role\n        _setRoleAdmin(TRANSFER_ROLE, ADMIN_ROLE);\n    }\n\n    \/\/\/ @dev A modifier which checks that the caller has the minter role.\n    modifier onlyMinter() {\n        require(hasRole(MINTER_ROLE, msg.sender), \"RibbonToken: only minter\");\n        _;\n    }\n\n    \/\/\/ @dev A modifier which checks that the caller has the admin role.\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"RibbonToken: only admin\");\n        _;\n    }\n\n    \/\/\/ @dev A modifier which checks that the caller has transfer privileges.\n    modifier onlyTransferer(address from) {\n        require(\n            transfersAllowed ||\n                from == address(0) ||\n                hasRole(TRANSFER_ROLE, msg.sender),\n            \"RibbonToken: no transfer privileges\"\n        );\n        _;\n    }\n\n    \/\/\/ @dev Mints tokens to a recipient.\n    \/\/\/\n    \/\/\/ This function reverts if the caller does not have the minter role.\n    function mint(address _recipient, uint256 _amount) external onlyMinter {\n        _mint(_recipient, _amount);\n    }\n\n    \/\/\/ @dev Toggles transfer allowed flag.\n    \/\/\/\n    \/\/\/ This function reverts if the caller does not have the admin role.\n    function setTransfersAllowed(bool _transfersAllowed) external onlyAdmin {\n        transfersAllowed = _transfersAllowed;\n        emit TransfersAllowed(transfersAllowed);\n    }\n\n    \/\/\/ @dev Hook that is called before any transfer of tokens.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override onlyTransferer(from) {}\n\n    \/\/\/ @dev Emitted when transfer toggle is switched\n    event TransfersAllowed(bool transfersAllowed);\n}\n\npragma solidity ^0.5.3;\r\n\r\n\/\/\/ @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n\/\/\/ @author Stefan George - <stefan@gnosis.io>\r\n\/\/\/ @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    \/\/ masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    \/\/ To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    \/\/\/ @dev Constructor function sets address of master copy contract.\r\n    \/\/\/ @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    \/\/\/ @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        \/\/ solium-disable-next-line security\/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            \/\/ 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.8.0;\n\nimport {AnteTest} from \"..\/AnteTest.sol\";\nimport {IERC20Metadata} from \"@openzeppelin\/contracts\/token\/ERC20\/extensions\/IERC20Metadata.sol\";\n\n\/\/\/ @title Checks RBN balance of Ribbon multisig remains >= 1m\n\/\/\/ @notice Ante Test to check if Ribbon multisig has been hacked or rugged\ncontract AnteRibbonMultisigRBNTest is AnteTest(\"Ribbon Multisig RBN balance remains >=1m\") {\n    \/\/ https:\/\/etherscan.io\/address\/0xdaeada3d210d2f45874724beea03c7d4bbd41674\n    address public constant RIBBON_MULTISIG = 0xDAEada3d210D2f45874724BeEa03C7d4BBD41674;\n    \/\/ https:\/\/etherscan.io\/address\/0x6123B0049F904d730dB3C36a31167D9d4121fA6B\n    IERC20Metadata public constant RBN = IERC20Metadata(0x6123B0049F904d730dB3C36a31167D9d4121fA6B);\n    \/\/ set to 1 million RBN\n    uint256 public immutable thresholdBalance;\n\n    constructor() {\n        thresholdBalance = (1000 * 1000) * (10**RBN.decimals());\n\n        protocolName = \"Ribbon\";\n        testedContracts = [address(RBN), RIBBON_MULTISIG];\n    }\n\n    \/\/\/ @notice test to check if RBN balance in Ribbon Multisig is >=1m\n    \/\/\/ @return true if RBN balance in Ribbon Multisig is >=1m\n    function checkTestPasses() public view override returns (bool) {\n        return (RBN.balanceOf(RIBBON_MULTISIG) >= thresholdBalance);\n    }\n}\n END"}
{"prompt":"RibbonV2 Theta Vaults don't lose 90% of TVL This test checks that none of the T-STETH-C, T-USDC-P-ETH, T-ETH-C, and T-WBTC-C vaults' asset balance drops by 90% since 2022-12-02. Test owner can add new vaults (instant) or change the failure threshold for a vault (2-day wait period).\n\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.8;\n\nimport '.\/UpgradeabilityProxy.sol';\n\n\/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum\/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n *\/\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  \/**\n   * Contract constructor.\n   * @param _logic address of the initial implementation.\n   * @param admin_ Address of the proxy administrator.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   *\/\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(admin_);\n  }\n\n  \/**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   *\/\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  \/**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n   * validated in the constructor.\n   *\/\n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  \/**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   *\/\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  \/**\n   * @return adminAddress The address of the proxy admin.\n   *\/\n  function admin() external ifAdmin returns (address adminAddress) {\n    return _admin();\n  }\n\n  \/**\n   * @return implementationAddress The address of the implementation.\n   *\/\n  function implementation() external ifAdmin returns (address implementationAddress) {\n    return _implementation();\n  }\n\n  \/**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   *\/\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  \/**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   *\/\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  \/**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   *\/\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    (bool success,) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  \/**\n   * @return adm The admin slot.\n   *\/\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  \/**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   *\/\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  \/**\n   * @dev Only fall back when the sender is not the admin.\n   *\/\n  function _willFallback() internal override virtual {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n\n\/**\r\n *Submitted for verification at Etherscan.io on 2021-02-27\r\n*\/\r\n\r\n\/\/ SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.8;\r\n\r\n\r\n\/\/ \r\n\/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n *\/\r\nabstract contract Proxy {\r\n  \/**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   *\/\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  \/**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   *\/\r\n  receive () payable external {\r\n    \/\/ _fallback();\r\n  }\r\n\r\n  \/**\r\n   * @return The Address of the implementation.\r\n   *\/\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  \/**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   *\/\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      \/\/ Copy msg.data. We take full control of memory in this inline assembly\r\n      \/\/ block because it will not return to Solidity code. We overwrite the\r\n      \/\/ Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      \/\/ Call the implementation.\r\n      \/\/ out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      \/\/ Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      \/\/ delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   *\/\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  \/**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   *\/\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n\/\/ \r\n\/**\r\n * @dev Collection of functions related to the address type\r\n *\/\r\nlibrary Address {\r\n    \/**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\/\r\n    function isContract(address account) internal view returns (bool) {\r\n        \/\/ This method relies on extcodesize, which returns 0 for contracts in\r\n        \/\/ construction, since the code is only stored at the end of the\r\n        \/\/ constructor execution.\r\n\r\n        uint256 size;\r\n        \/\/ solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    \/**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https:\/\/eips.ethereum.org\/EIPS\/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https:\/\/diligence.consensys.net\/posts\/2019\/09\/stop-using-soliditys-transfer-now\/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https:\/\/solidity.readthedocs.io\/en\/v0.5.11\/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\/\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        \/\/ solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \/**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https:\/\/solidity.readthedocs.io\/en\/latest\/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     *\/\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     *\/\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     *\/\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     *\/\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        \/\/ solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     *\/\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     *\/\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        \/\/ solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     *\/\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \/**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     *\/\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        \/\/ solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \/\/ Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                \/\/ The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                \/\/ solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\/\/ \r\n\/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n *\/\r\ncontract UpgradeabilityProxy is Proxy {\r\n  \/**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   *\/\r\n  constructor(address _logic, bytes memory _data) payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n\r\n  \/**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   *\/\r\n  event Upgraded(address indexed implementation);\r\n\r\n  \/**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   *\/\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  \/**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   *\/\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   *\/\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  \/**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   *\/\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\/\/ \r\n\/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum\/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n *\/\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  \/**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   *\/\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n\r\n  \/**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   *\/\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  \/**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   *\/\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  \/**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   *\/\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * @return The address of the proxy admin.\r\n   *\/\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  \/**\r\n   * @return The address of the implementation.\r\n   *\/\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  \/**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   *\/\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  \/**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   *\/\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  \/**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\r\n   *\/\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  \/**\r\n   * @return adm The admin slot.\r\n   *\/\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   *\/\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   *\/\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.8.0;\n\nimport {AnteTest} from \"..\/AnteTest.sol\";\nimport {IController, GammaTypes} from \".\/ribbon-v2-contracts\/interfaces\/GammaInterface.sol\";\nimport {IWSTETH} from \".\/ribbon-v2-contracts\/interfaces\/ISTETH.sol\";\nimport {IERC20} from \"@openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin\/contracts\/access\/Ownable.sol\";\n\n\/\/\/ @title Checks that RibbonV2 Theta Vaults do not lose 90% of their assets\n\/\/\/ @notice Ante Test to check if a catastrophic failure has occured in RibbonV2\ncontract AnteRibbonV2UpdatableThetaVaultPlungeTest is Ownable, AnteTest(\"RibbonV2 Theta Vaults don't lose 90% of TVL\") {\n    \/\/\/ @notice Emitted when test owner adds a vault to check\n    \/\/\/ @param vault The address of the vault added\n    \/\/\/ @param vaultAssets The addresses of the ERC20 tokens used by the vault\n    \/\/\/ @param initialThreshold the initial failure threshold of the new vault\n    event AnteRibbonTestVaultAdded(address indexed vault, address[] vaultAssets, uint256 initialThreshold);\n\n    \/\/\/ @notice Emitted when test owner commits a failure thresholds update\n    \/\/\/ @param vault The address of the vault to be updated\n    \/\/\/ @param oldThreshold old failure threshold\n    \/\/\/ @param newThreshold new failure threshold\n    event AnteRibbonTestPendingUpdate(address indexed vault, uint256 oldThreshold, uint256 newThreshold);\n\n    \/\/\/ @notice Emitted when test owner updates test vaults\/thresholds\n    \/\/\/ @param vault The address of the updated vault\n    \/\/\/ @param oldThreshold old failure threshold\n    \/\/\/ @param newThreshold new failure threshold\n    event AnteRibbonTestUpdated(address indexed vault, uint256 oldThreshold, uint256 newThreshold);\n    \/\/\/ Opyn Controller\n    IController internal controller = IController(0x4ccc2339F87F6c59c6893E1A678c2266cA58dC72);\n\n    \/\/\/ Array of Theta Vaults checked by this test\n    address[] public thetaVaults;\n\n    \/\/\/ Mapping of asset to check for each vault\n    \/\/ The Ribbon vault and Opyn controller don't provide this 100% reliably\n    mapping(address => IERC20[]) public assets;\n\n    \/\/\/ Mapping of vault balance failure thresholds\n    mapping(address => uint256) public thresholds;\n\n    \/\/\/ wstETH address, because we need to handle it differently\n    IWSTETH public constant WSTETH = IWSTETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\n\n    \/\/\/ Max number of vaults to test (to guard against block stuffing)\n    uint256 public constant MAX_VAULTS = 20;\n\n    \/\/\/ Failure threshold as % of initial value (set to 10%)\n    uint8 public constant INITIAL_FAILURE_THRESHOLD_PERCENT = 10;\n\n    \/\/\/ Minimum waiting period for major test updates by owner\n    uint256 public constant UPDATE_WAITING_PERIOD = 172800; \/\/ 2 days\n\n    \/\/\/ Last timestamp test parameters were updated\n    uint256 public lastUpdated;\n\n    \/\/ Update-related variables\n    address public pendingVault;\n    uint256 public newThreshold;\n    uint256 public updateCommittedTime;\n\n    constructor() {\n        protocolName = \"Ribbon\";\n\n        \/\/ Initial set of vaults\/assets - top vaults by TVL (90% of TVL as of 2022-11-30)\n        thetaVaults.push(0x53773E034d9784153471813dacAFF53dBBB78E8c); \/\/ T-STETH-C vault\n        \/\/ stETH vault balance calc includes WETH, stETH, and wstETH->stETH equivalent\n        assets[0x53773E034d9784153471813dacAFF53dBBB78E8c] = [\n            IERC20(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0), \/\/ wstETH\n            IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84), \/\/ stETH\n            IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) \/\/ WETH\n        ];\n\n        thetaVaults.push(0xCc323557c71C0D1D20a1861Dc69c06C5f3cC9624); \/\/ T-USDC-P-ETH vault\n        assets[0xCc323557c71C0D1D20a1861Dc69c06C5f3cC9624].push(\n            IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) \/\/ USDC\n        );\n\n        thetaVaults.push(0x25751853Eab4D0eB3652B5eB6ecB102A2789644B); \/\/ T-ETH-C vault\n        assets[0x25751853Eab4D0eB3652B5eB6ecB102A2789644B].push(\n            IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) \/\/ WETH\n        );\n\n        thetaVaults.push(0x65a833afDc250D9d38f8CD9bC2B1E3132dB13B2F); \/\/ T-WBTC-C vault\n        assets[0x65a833afDc250D9d38f8CD9bC2B1E3132dB13B2F].push(\n            IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599) \/\/ WBTC\n        );\n\n        \/\/ Set initial failure thresholds (10% of vault balance at time of test deploy)\n        address vault;\n        uint256 numVaults = thetaVaults.length;\n        for (uint256 i; i < numVaults; i++) {\n            vault = thetaVaults[i];\n            thresholds[vault] = (calculateVaultBalance(vault) * INITIAL_FAILURE_THRESHOLD_PERCENT) \/ 100;\n            testedContracts.push(vault);\n        }\n        lastUpdated = block.timestamp;\n    }\n\n    \/\/\/ @notice checks balance of Ribbon Theta V2 vaults against threshold\n    \/\/\/ (by default, 10% of vault balance when added to test)\n    \/\/\/ @return true if balance of all theta vaults is greater than thresholds\n    function checkTestPasses() external view override returns (bool) {\n        address vault;\n        uint256 numVaults = thetaVaults.length;\n        for (uint256 i; i < numVaults; i++) {\n            vault = thetaVaults[i];\n            if (calculateVaultBalance(vault) < thresholds[vault]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    \/\/\/ @notice computes balance of vault asset in a given Ribbon Theta Vault\n    \/\/\/ @param thetaVault RibbonV2 Theta Vault address\n    \/\/\/ @return balance of vault\n    function calculateVaultBalance(address thetaVault) public view returns (uint256) {\n        GammaTypes.Vault memory opynVault = controller.getVault(\n            thetaVault,\n            controller.getAccountVaultCounter(thetaVault)\n        );\n\n        uint256 totalBalance;\n        IERC20 asset;\n        uint256 numAssets = assets[thetaVault].length;\n        for (uint256 i = 0; i < numAssets; i++) {\n            asset = IERC20(assets[thetaVault][i]);\n            if (address(asset) == address(WSTETH)) {\n                \/\/ convert wstETH to stETH equivalent amount\n                totalBalance += WSTETH.getStETHByWstETH(WSTETH.balanceOf(thetaVault));\n            } else {\n                totalBalance += asset.balanceOf(thetaVault);\n            }\n        }\n\n        \/\/ Note: assumes the collateral asset of interest is 1st in array\n        if (\n            opynVault.collateralAmounts.length > 0 &&\n            opynVault.collateralAssets.length > 0 &&\n            opynVault.collateralAssets[0] == address(assets[thetaVault][0])\n        ) {\n            if (address(opynVault.collateralAssets[0]) == address(WSTETH)) {\n                return totalBalance + WSTETH.getStETHByWstETH(opynVault.collateralAmounts[0]);\n            } else {\n                return totalBalance + opynVault.collateralAmounts[0];\n            }\n        } else {\n            \/\/ in between rounds, so collateralAmounts is null array\n            return totalBalance;\n        }\n    }\n\n    \/\/ == ADMIN FUNCTIONS == \/\/\n\n    \/\/\/ @notice Add a Ribbon Theta Vault to test and set failure threshold\n    \/\/\/         to 10% of current TVL. Can only be called by owner (Ribbon)\n    \/\/\/ @param vault Ribbon V2 Theta Vault address to add\n    \/\/\/ @param _assets array of token addresses of vault asset -- NOTE: must be 1:1 equivalent\n    \/\/\/ @dev when adding vaults, the collateral asset used in Opyn should be\n    \/\/\/      the first asset in the array\n    function addVault(address vault, address[] memory _assets) public onlyOwner {\n        \/\/ Checks max vaults + valid Opyn vault for the given theta vault address\n        require(thetaVaults.length < MAX_VAULTS, \"Maximum number of tested vaults reached!\");\n        require(_assets.length > 0, \"no assets provided!\");\n        GammaTypes.Vault memory opynVault = controller.getVault(vault, controller.getAccountVaultCounter(vault));\n        require(opynVault.collateralAmounts.length > 0, \"Invalid vault\");\n        require(\n            opynVault.collateralAssets.length > 0 && opynVault.collateralAssets[0] == _assets[0],\n            \"primary assets don't match!\"\n        );\n\n        uint256 numAssets = _assets.length;\n        assets[vault] = new IERC20[](numAssets);\n        for (uint256 i = 0; i < numAssets; i++) {\n            assets[vault][i] = IERC20(_assets[i]);\n        }\n\n        uint256 balance = calculateVaultBalance(vault);\n        require(balance > 0, \"Vault has no balance!\");\n\n        thetaVaults.push(vault);\n        thresholds[vault] = (balance * INITIAL_FAILURE_THRESHOLD_PERCENT) \/ 100;\n        testedContracts.push(vault);\n        lastUpdated = block.timestamp;\n\n        emit AnteRibbonTestVaultAdded(vault, _assets, thresholds[vault]);\n    }\n\n    \/\/\/ @notice Propose a new vault failure threshold value and start waiting\n    \/\/\/         period before update is made. Can only be called by owner (Ribbon)\n    \/\/\/ @param vault address of vault to reset TVL threshold for\n    \/\/\/ @param threshold to set (in opyn vault collateral asset with decimals)\n    function commitUpdateFailureThreshold(address vault, uint256 threshold) public onlyOwner {\n        require(assets[vault].length > 0, \"Vault not in list\");\n        require(pendingVault == address(0), \"Another update already pending!\");\n        require(calculateVaultBalance(vault) >= threshold, \"test would fail proposed threshold!\");\n\n        pendingVault = vault;\n        newThreshold = threshold;\n        updateCommittedTime = block.timestamp;\n        emit AnteRibbonTestPendingUpdate(pendingVault, thresholds[pendingVault], newThreshold);\n    }\n\n    \/\/\/ @notice Update test failure threshold after waiting period has passed.\n    \/\/\/         Can be called by anyone, just costs gas\n    function executeUpdateFailureThreshold() public {\n        require(pendingVault != address(0), \"No update pending!\");\n        require(\n            block.timestamp > updateCommittedTime + UPDATE_WAITING_PERIOD,\n            \"Need to wait 2 days to adjust failure threshold!\"\n        );\n        emit AnteRibbonTestUpdated(pendingVault, thresholds[pendingVault], newThreshold);\n        thresholds[pendingVault] = newThreshold;\n\n        pendingVault = address(0);\n        lastUpdated = block.timestamp;\n    }\n}\n END"}
{"prompt":"Ribbon Theta Vault Balance above or equal to asset value\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.8;\n\n\n\/\/ \n\/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n *\/\nabstract contract Proxy {\n  \/**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   *\/\n  fallback () payable external {\n    _fallback();\n  }\n\n  \/**\n   * @dev Receive function.\n   * Implemented entirely in `_fallback`.\n   *\/\n  receive () payable external {\n    \/\/ _fallback();\n  }\n\n  \/**\n   * @return The Address of the implementation.\n   *\/\n  function _implementation() internal virtual view returns (address);\n\n  \/**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   *\/\n  function _delegate(address implementation) internal {\n    assembly {\n      \/\/ Copy msg.data. We take full control of memory in this inline assembly\n      \/\/ block because it will not return to Solidity code. We overwrite the\n      \/\/ Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n      \/\/ Call the implementation.\n      \/\/ out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      \/\/ Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      \/\/ delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n\n  \/**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   *\/\n  function _willFallback() internal virtual {\n  }\n\n  \/**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   *\/\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\n\/\/ \n\/**\n * @dev Collection of functions related to the address type\n *\/\nlibrary Address {\n    \/**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\/\n    function isContract(address account) internal view returns (bool) {\n        \/\/ This method relies on extcodesize, which returns 0 for contracts in\n        \/\/ construction, since the code is only stored at the end of the\n        \/\/ constructor execution.\n\n        uint256 size;\n        \/\/ solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    \/**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https:\/\/eips.ethereum.org\/EIPS\/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https:\/\/diligence.consensys.net\/posts\/2019\/09\/stop-using-soliditys-transfer-now\/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https:\/\/solidity.readthedocs.io\/en\/v0.5.11\/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\/\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        \/\/ solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    \/**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https:\/\/solidity.readthedocs.io\/en\/latest\/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     *\/\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     *\/\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     *\/\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     *\/\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        \/\/ solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     *\/\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     *\/\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        \/\/ solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     *\/\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    \/**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     *\/\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        \/\/ solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            \/\/ Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                \/\/ The easiest way to bubble the revert reason is using memory via assembly\n\n                \/\/ solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\/\/ \n\/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n *\/\ncontract UpgradeabilityProxy is Proxy {\n  \/**\n   * @dev Contract constructor.\n   * @param _logic Address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   *\/\n  constructor(address _logic, bytes memory _data) payable {\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }  \n\n  \/**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   *\/\n  event Upgraded(address indexed implementation);\n\n  \/**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n   * validated in the constructor.\n   *\/\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  \/**\n   * @dev Returns the current implementation.\n   * @return impl Address of the current implementation\n   *\/\n  function _implementation() internal override view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  \/**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   *\/\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  \/**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   *\/\n  function _setImplementation(address newImplementation) internal {\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n\n\/\/ \n\/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum\/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n *\/\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  \/**\n   * Contract constructor.\n   * @param _logic address of the initial implementation.\n   * @param _admin Address of the proxy administrator.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   *\/\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(_admin);\n  }\n\n  \/**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   *\/\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  \/**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n   * validated in the constructor.\n   *\/\n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  \/**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   *\/\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  \/**\n   * @return The address of the proxy admin.\n   *\/\n  function admin() external ifAdmin returns (address) {\n    return _admin();\n  }\n\n  \/**\n   * @return The address of the implementation.\n   *\/\n  function implementation() external ifAdmin returns (address) {\n    return _implementation();\n  }\n\n  \/**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   *\/\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  \/**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   *\/\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  \/**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   *\/\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    (bool success,) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  \/**\n   * @return adm The admin slot.\n   *\/\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  \/**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   *\/\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  \/**\n   * @dev Only fall back when the sender is not the admin.\n   *\/\n  function _willFallback() internal override virtual {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}","completion":" MIT\n\npragma solidity >=0.8.0;\n\nimport \"..\/AnteTest.sol\";\n\ninterface IRibbonThetaVault {\n    \/\/Returns the asset balance on the vault.\n    function totalBalance() external view returns (uint256);\n\n    \/\/Returns the vault's total balance, ncluding the amounts locked into a short position\n    function assetBalance() external view returns (uint256);\n}\n\n\/\/ Ante Test to check if Ribbon Theta Vault maintains a total balance above or equal to its asset balance\n\/\/ written for Ribbon V1\ncontract AnteRibbonBalanceTest is AnteTest(\"Ribbon Theta Vault Balance above or equal to asset value\") {\n    \/\/ https:\/\/etherscan.io\/address\/0x0FABaF48Bbf864a3947bdd0Ba9d764791a60467A\n    address public constant ribbonThetaVaultAddr = 0x0FABaF48Bbf864a3947bdd0Ba9d764791a60467A;\n\n    IRibbonThetaVault public ribbonThetaVault = IRibbonThetaVault(ribbonThetaVaultAddr);\n\n    constructor() {\n        protocolName = \"Ribbon\";\n        testedContracts = [ribbonThetaVaultAddr];\n    }\n\n    function checkTestPasses() public view override returns (bool) {\n        return (ribbonThetaVault.totalBalance() >= ribbonThetaVault.assetBalance());\n    }\n} END"}
{"prompt":"RibbonV2 doesn't lose 90% of its TVL. This test checks that the asset balance of the T-ETH-C and T-WBTC-C vaults don't drop by 90% since the date this test was deployed (2022-03-25). The test failed due to an unforeseen edge case (postmortem coming soon).\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.8;\n\nimport '.\/UpgradeabilityProxy.sol';\n\n\/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum\/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n *\/\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  \/**\n   * Contract constructor.\n   * @param _logic address of the initial implementation.\n   * @param admin_ Address of the proxy administrator.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   *\/\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(admin_);\n  }\n\n  \/**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   *\/\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  \/**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n   * validated in the constructor.\n   *\/\n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  \/**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   *\/\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  \/**\n   * @return adminAddress The address of the proxy admin.\n   *\/\n  function admin() external ifAdmin returns (address adminAddress) {\n    return _admin();\n  }\n\n  \/**\n   * @return implementationAddress The address of the implementation.\n   *\/\n  function implementation() external ifAdmin returns (address implementationAddress) {\n    return _implementation();\n  }\n\n  \/**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   *\/\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  \/**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   *\/\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  \/**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https:\/\/solidity.readthedocs.io\/en\/v0.4.24\/abi-spec.html#function-selector-and-argument-encoding.\n   *\/\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    (bool success,) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  \/**\n   * @return adm The admin slot.\n   *\/\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  \/**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   *\/\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  \/**\n   * @dev Only fall back when the sender is not the admin.\n   *\/\n  function _willFallback() internal override virtual {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.8.0;\n\nimport {AnteTest} from \"..\/AnteTest.sol\";\nimport {IRibbonThetaVault} from \".\/ribbon-v2-contracts\/interfaces\/IRibbonThetaVault.sol\";\nimport {IController, GammaTypes} from \".\/ribbon-v2-contracts\/interfaces\/GammaInterface.sol\";\nimport {Vault} from \".\/ribbon-v2-contracts\/libraries\/Vault.sol\";\nimport {IERC20} from \"@openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\";\n\n\/\/\/ @title Checks that RibbonV2 Theta vaults do not lose 90% of their assets\n\/\/\/ @notice Ante Test to check if a catastrophic failure has occured in RibbonV2\ncontract AnteRibbonV2ThetaVaultPlungeTest is AnteTest(\"RibbonV2 doesn't lose 90% of its TVL\") {\n    \/\/ currently deployed RibbonV2 theta vaults\n    IRibbonThetaVault[2] public thetaVaults = [\n        IRibbonThetaVault(0x25751853Eab4D0eB3652B5eB6ecB102A2789644B), \/\/ eth vault\n        IRibbonThetaVault(0x65a833afDc250D9d38f8CD9bC2B1E3132dB13B2F) \/\/ wbtc vault\n    ];\n\n    \/\/ Opyn Controller\n    IController internal controller = IController(0x4ccc2339F87F6c59c6893E1A678c2266cA58dC72);\n\n    \/\/ threshold amounts for test to fail\n    uint256[2] public thresholds;\n\n    \/\/\/ @notice percent drop threshold (set to 10%)\n    uint8 public constant PERCENT_DROP_THRESHOLD = 10;\n\n    constructor() {\n        protocolName = \"Ribbon\";\n        for (uint256 i; i < thetaVaults.length; i++) {\n            thresholds[i] = (calculateAssetBalance(thetaVaults[i]) * PERCENT_DROP_THRESHOLD) \/ 100;\n            testedContracts.push(address(thetaVaults[i]));\n        }\n    }\n\n    \/\/\/ @notice computes balance of underlying asset in a given Ribbon Theta Vault\n    \/\/\/ @param vault RibbonV2 Theta Vault address\n    \/\/\/ @return balance of vault\n    function calculateAssetBalance(IRibbonThetaVault vault) public view returns (uint256) {\n        Vault.VaultParams memory vaultParams = vault.vaultParams();\n        IERC20 underlying = IERC20(vaultParams.underlying);\n\n        GammaTypes.Vault memory opynVault = controller.getVault(\n            address(vault),\n            controller.getAccountVaultCounter(address(vault))\n        );\n\n        \/\/ make assumption that there is only one collateral asset in vault\n        return underlying.balanceOf(address(vault)) + opynVault.collateralAmounts[0];\n    }\n\n    \/\/\/ @notice checks balance of Ribbon Theta V2 vaults against threshold\n    \/\/\/ (10% of balance when this contract was deployed)\n    \/\/\/ @return true if balance of all theta vaults is greater than thresholds\n    function checkTestPasses() external view override returns (bool) {\n        for (uint256 i; i < thetaVaults.length; i++) {\n            if (calculateAssetBalance(thetaVaults[i]) < thresholds[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n} END"}
{"prompt":"Ante Pool contract state matches eth balance\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/math\/SafeMath.sol\";\nimport \"@openzeppelin\/contracts\/utils\/Address.sol\";\n\nimport \".\/interfaces\/IAnteTest.sol\";\nimport \".\/libraries\/IterableSet.sol\";\nimport \".\/libraries\/FullMath.sol\";\nimport \".\/interfaces\/IAntePool.sol\";\n\n\/\/\/ @title Ante V0.5 Ante Pool smart contract\n\/\/\/ @notice Deploys an Ante Pool and connects with the Ante Test, manages pools and interactions with users\ncontract AntePool is IAntePool {\n    using SafeMath for uint256;\n    using FullMath for uint256;\n    using Address for address;\n    using IterableAddressSetUtils for IterableAddressSetUtils.IterableAddressSet;\n\n    \/\/\/ @notice Info related to a single user\n    struct UserInfo {\n        \/\/ How much ETH this user deposited.\n        uint256 startAmount;\n        \/\/ How much decay this side of the pool accrued between (0, this user's\n        \/\/ entry block), stored as a multiplier expressed as an 18-decimal\n        \/\/ mantissa. For example, if this side of the pool accrued a decay of\n        \/\/ 20% during this time period, we'd store 1.2e18 (staking side) or\n        \/\/ 0.8e18 (challenger side).\n        uint256 startDecayMultiplier;\n    }\n\n    \/\/\/ @notice Info related to one side of the pool\n    struct PoolSideInfo {\n        mapping(address => UserInfo) userInfo;\n        \/\/ Number of users on this side of the pool.\n        uint256 numUsers;\n        \/\/ Amount staked across all users on this side of the pool, as of\n        \/\/ `lastUpdateBlock`.`\n        uint256 totalAmount;\n        \/\/ How much decay this side of the pool accrued between (0,\n        \/\/ lastUpdateBlock), stored as a multiplier expressed as an 18-decimal\n        \/\/ mantissa. For example, if this side of the pool accrued a decay of\n        \/\/ 20% during this time period, we'd store 1.2e18 (staking side) or\n        \/\/ 0.8e18 (challenger side).\n        uint256 decayMultiplier;\n    }\n\n    \/\/\/ @notice Info related to eligible challengers\n    struct ChallengerEligibilityInfo {\n        \/\/ Used when test fails to determine which challengers should receive payout\n        \/\/ i.e., those which haven't staked within 12 blocks prior to test failure\n        mapping(address => uint256) lastStakedBlock;\n        uint256 eligibleAmount;\n    }\n\n    \/\/\/ @notice Info related to stakers who are currently withdrawing\n    struct StakerWithdrawInfo {\n        mapping(address => UserUnstakeInfo) userUnstakeInfo;\n        uint256 totalAmount;\n    }\n\n    \/\/\/ @notice Info related to a single withdrawing user\n    struct UserUnstakeInfo {\n        uint256 lastUnstakeTimestamp;\n        uint256 amount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    IAnteTest public override anteTest;\n    \/\/\/ @inheritdoc IAntePool\n    address public override factory;\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev pendingFailure set to true until pool is initialized to avoid\n    \/\/\/ people staking in uninitialized pools\n    bool public override pendingFailure = true;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override numTimesVerified;\n    \/\/\/ @dev Percent of staked amount alloted for verifier bounty\n    uint256 public constant VERIFIER_BOUNTY = 5;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override failedBlock;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override lastVerifiedBlock;\n    \/\/\/ @inheritdoc IAntePool\n    address public override verifier;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override numPaidOut;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override totalPaidOut;\n\n    \/\/\/ @dev pool can only be initialized once\n    bool internal _initialized = false;\n    \/\/\/ @dev Bounty amount, set when test fails\n    uint256 internal _bounty;\n    \/\/\/ @dev Total staked value, after bounty is removed\n    uint256 internal _remainingStake;\n\n    \/\/\/ @dev Amount of decay to charge each challengers ETH per block\n    \/\/\/ 100 gwei decay per block per ETH is ~20-25% decay per year\n    uint256 public constant DECAY_RATE_PER_BLOCK = 100 gwei;\n\n    \/\/\/ @dev Number of blocks a challenger must be staking before they are\n    \/\/\/ eligible for paytout on test failure\n    uint8 public constant CHALLENGER_BLOCK_DELAY = 12;\n\n    \/\/\/ @dev Minimum challenger stake is 0.01 ETH\n    uint256 public constant MIN_CHALLENGER_STAKE = 1e16;\n\n    \/\/\/ @dev Time after initiating withdraw before staker can finally withdraw capital,\n    \/\/\/ starts when staker initiates the unstake action\n    uint256 public constant UNSTAKE_DELAY = 24 hours;\n\n    \/\/\/ @dev convenience constant for 1 ether worth of wei\n    uint256 private constant ONE = 1e18;\n\n    \/\/\/ @inheritdoc IAntePool\n    PoolSideInfo public override stakingInfo;\n    \/\/\/ @inheritdoc IAntePool\n    PoolSideInfo public override challengerInfo;\n    \/\/\/ @inheritdoc IAntePool\n    ChallengerEligibilityInfo public override eligibilityInfo;\n    \/\/\/ @dev All addresses currently challenging the Ante Test\n    IterableAddressSetUtils.IterableAddressSet private challengers;\n    \/\/\/ @inheritdoc IAntePool\n    StakerWithdrawInfo public override withdrawInfo;\n\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override lastUpdateBlock;\n\n    \/\/\/ @notice Modifier function to make sure test hasn't failed yet\n    modifier testNotFailed() {\n        _testNotFailed();\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!_initialized, \"ANTE: Pool already initialized\");\n        _;\n    }\n\n    \/\/\/ @dev Ante Pools are deployed by Ante Pool Factory, and we store\n    \/\/\/ the address of the factory here\n    constructor() {\n        factory = msg.sender;\n        stakingInfo.decayMultiplier = ONE;\n        challengerInfo.decayMultiplier = ONE;\n        lastUpdateBlock = block.number;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function initialize(IAnteTest _anteTest) external override notInitialized {\n        require(msg.sender == factory, \"ANTE: only factory can initialize AntePool\");\n        require(address(_anteTest).isContract(), \"ANTE: AnteTest must be a smart contract\");\n        \/\/ Check that anteTest has checkTestPasses function and that it currently passes\n        \/\/ place check here to minimize reentrancy risk - most external function calls are locked\n        \/\/ while pendingFailure is true\n        require(_anteTest.checkTestPasses(), \"ANTE: AnteTest does not implement checkTestPasses or test fails\");\n\n        _initialized = true;\n        pendingFailure = false;\n        anteTest = _anteTest;\n    }\n\n    \/*****************************************************\n     * ================ USER INTERFACE ================= *\n     *****************************************************\/\n\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev Stake `msg.value` on the side given by `isChallenger`\n    function stake(bool isChallenger) external payable override testNotFailed {\n        uint256 amount = msg.value;\n        require(amount > 0, \"ANTE: Cannot stake zero\");\n\n        updateDecay();\n\n        PoolSideInfo storage side;\n        if (isChallenger) {\n            require(amount >= MIN_CHALLENGER_STAKE, \"ANTE: Challenger must stake more than 0.01 ETH\");\n            side = challengerInfo;\n\n            \/\/ Record challenger info for future use\n            \/\/ Challengers are not eligible for rewards if challenging within 12 block window of test failure\n            challengers.insert(msg.sender);\n            eligibilityInfo.lastStakedBlock[msg.sender] = block.number;\n        } else {\n            side = stakingInfo;\n        }\n\n        UserInfo storage user = side.userInfo[msg.sender];\n\n        \/\/ Calculate how much the user already has staked, including the\n        \/\/ effects of any previously accrued decay.\n        \/\/   prevAmount = startAmount * decayMultipiler \/ startDecayMultiplier\n        \/\/   newAmount = amount + prevAmount\n        if (user.startAmount > 0) {\n            user.startAmount = amount.add(_storedBalance(user, side));\n        } else {\n            user.startAmount = amount;\n            side.numUsers = side.numUsers.add(1);\n        }\n        side.totalAmount = side.totalAmount.add(amount);\n\n        \/\/ Reset the startDecayMultiplier for this user, since we've updated\n        \/\/ the startAmount to include any already-accrued decay.\n        user.startDecayMultiplier = side.decayMultiplier;\n\n        emit Stake(msg.sender, amount, isChallenger);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev Unstake `amount` on the side given by `isChallenger`.\n    function unstake(uint256 amount, bool isChallenger) external override testNotFailed {\n        require(amount > 0, \"ANTE: Cannot unstake 0.\");\n\n        updateDecay();\n\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\n\n        UserInfo storage user = side.userInfo[msg.sender];\n        _unstake(amount, isChallenger, side, user);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function unstakeAll(bool isChallenger) external override testNotFailed {\n        updateDecay();\n\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\n\n        UserInfo storage user = side.userInfo[msg.sender];\n\n        uint256 amount = _storedBalance(user, side);\n        require(amount > 0, \"ANTE: Nothing to unstake\");\n\n        _unstake(amount, isChallenger, side, user);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function withdrawStake() external override testNotFailed {\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n\n        require(\n            unstakeUser.lastUnstakeTimestamp < block.timestamp - UNSTAKE_DELAY,\n            \"ANTE: must wait 24 hours to withdraw stake\"\n        );\n        require(unstakeUser.amount > 0, \"ANTE: Nothing to withdraw\");\n\n        uint256 amount = unstakeUser.amount;\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\n        unstakeUser.amount = 0;\n\n        _safeTransfer(msg.sender, amount);\n\n        emit WithdrawStake(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function cancelPendingWithdraw() external override testNotFailed {\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n\n        require(unstakeUser.amount > 0, \"ANTE: No pending withdraw balance\");\n        uint256 amount = unstakeUser.amount;\n        unstakeUser.amount = 0;\n\n        updateDecay();\n\n        UserInfo storage user = stakingInfo.userInfo[msg.sender];\n        if (user.startAmount > 0) {\n            user.startAmount = amount.add(_storedBalance(user, stakingInfo));\n        } else {\n            user.startAmount = amount;\n            stakingInfo.numUsers = stakingInfo.numUsers.add(1);\n        }\n        stakingInfo.totalAmount = stakingInfo.totalAmount.add(amount);\n        user.startDecayMultiplier = stakingInfo.decayMultiplier;\n\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\n\n        emit CancelWithdraw(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function checkTest() external override testNotFailed {\n        require(challengers.exists(msg.sender), \"ANTE: Only challengers can checkTest\");\n        require(\n            block.number.sub(eligibilityInfo.lastStakedBlock[msg.sender]) > CHALLENGER_BLOCK_DELAY,\n            \"ANTE: must wait 12 blocks after challenging to call checkTest\"\n        );\n\n        numTimesVerified = numTimesVerified.add(1);\n        lastVerifiedBlock = block.number;\n        emit TestChecked(msg.sender);\n        if (!_checkTestNoRevert()) {\n            updateDecay();\n            verifier = msg.sender;\n            failedBlock = block.number;\n            pendingFailure = true;\n\n            _calculateChallengerEligibility();\n            _bounty = getVerifierBounty();\n\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n            _remainingStake = totalStake.sub(_bounty);\n\n            emit FailureOccurred(msg.sender);\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function claim() external override {\n        require(pendingFailure, \"ANTE: Test has not failed\");\n\n        UserInfo storage user = challengerInfo.userInfo[msg.sender];\n        require(user.startAmount > 0, \"ANTE: No Challenger Staking balance\");\n\n        uint256 amount = _calculateChallengerPayout(user, msg.sender);\n        \/\/ Zero out the user so they can't claim again.\n        user.startAmount = 0;\n\n        numPaidOut = numPaidOut.add(1);\n        totalPaidOut = totalPaidOut.add(amount);\n\n        _safeTransfer(msg.sender, amount);\n        emit ClaimPaid(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function updateDecay() public override {\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\n\n        lastUpdateBlock = block.number;\n\n        if (decayThisUpdate == 0) return;\n\n        uint256 totalStaked = stakingInfo.totalAmount;\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\n\n        \/\/ update totoal accrued decay amounts for challengers\n        \/\/ decayMultiplier for challengers = decayMultiplier for challengers * decayMultiplierThisUpdate\n        \/\/ totalChallengerStaked = totalChallengerStaked - decayThisUpdate\n        challengerInfo.decayMultiplier = challengerInfo.decayMultiplier.mulDiv(decayMultiplierThisUpdate, ONE);\n        challengerInfo.totalAmount = totalChallengerStaked.sub(decayThisUpdate);\n\n        \/\/ Update the new accrued decay amounts for stakers.\n        \/\/   totalStaked_new = totalStaked_old + decayThisUpdate\n        \/\/   decayMultipilerThisUpdate = totalStaked_new \/ totalStaked_old\n        \/\/   decayMultiplier_staker = decayMultiplier_staker * decayMultiplierThisUpdate\n        uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\n\n        stakingInfo.decayMultiplier = stakingInfo.decayMultiplier.mulDiv(totalStakedNew, totalStaked);\n        stakingInfo.totalAmount = totalStakedNew;\n    }\n\n    \/*****************************************************\n     * ================ VIEW FUNCTIONS ================= *\n     *****************************************************\/\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalChallengerStaked() external view override returns (uint256) {\n        return challengerInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalStaked() external view override returns (uint256) {\n        return stakingInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalPendingWithdraw() external view override returns (uint256) {\n        return withdrawInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalChallengerEligibleBalance() external view override returns (uint256) {\n        return eligibilityInfo.eligibleAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getChallengerPayout(address challenger) external view override returns (uint256) {\n        UserInfo storage user = challengerInfo.userInfo[challenger];\n        require(user.startAmount > 0, \"ANTE: No Challenger Staking balance\");\n\n        \/\/ If called before test failure returns an estimate\n        if (pendingFailure) {\n            return _calculateChallengerPayout(user, challenger);\n        } else {\n            uint256 amount = _storedBalance(user, challengerInfo);\n            uint256 bounty = getVerifierBounty();\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n\n            return amount.add(amount.mulDiv(totalStake.sub(bounty), challengerInfo.totalAmount));\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getStoredBalance(address _user, bool isChallenger) external view override returns (uint256) {\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\n\n        UserInfo storage user = isChallenger ? challengerInfo.userInfo[_user] : stakingInfo.userInfo[_user];\n\n        if (user.startAmount == 0) return 0;\n\n        require(user.startDecayMultiplier > 0, \"ANTE: Invalid startDecayMultiplier\");\n\n        uint256 decayMultiplier;\n\n        if (isChallenger) {\n            decayMultiplier = challengerInfo.decayMultiplier.mul(decayMultiplierThisUpdate).div(1e18);\n        } else {\n            uint256 totalStaked = stakingInfo.totalAmount;\n            uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\n            decayMultiplier = stakingInfo.decayMultiplier.mul(totalStakedNew).div(totalStaked);\n        }\n\n        return user.startAmount.mulDiv(decayMultiplier, user.startDecayMultiplier);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getPendingWithdrawAmount(address _user) external view override returns (uint256) {\n        return withdrawInfo.userUnstakeInfo[_user].amount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getPendingWithdrawAllowedTime(address _user) external view override returns (uint256) {\n        UserUnstakeInfo storage user = withdrawInfo.userUnstakeInfo[_user];\n        require(user.amount > 0, \"ANTE: nothing to withdraw\");\n\n        return user.lastUnstakeTimestamp.add(UNSTAKE_DELAY);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getCheckTestAllowedBlock(address _user) external view override returns (uint256) {\n        return eligibilityInfo.lastStakedBlock[_user].add(CHALLENGER_BLOCK_DELAY);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getUserStartAmount(address _user, bool isChallenger) external view override returns (uint256) {\n        return isChallenger ? challengerInfo.userInfo[_user].startAmount : stakingInfo.userInfo[_user].startAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getVerifierBounty() public view override returns (uint256) {\n        uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n        return totalStake.mul(VERIFIER_BOUNTY).div(100);\n    }\n\n    \/*****************************************************\n     * =============== INTERNAL HELPERS ================ *\n     *****************************************************\/\n\n    \/\/\/ @notice Internal function activating the unstaking action for staker or challengers\n    \/\/\/ @param amount Amount to be removed in wei\n    \/\/\/ @param isChallenger True if user is a challenger\n    \/\/\/ @param side Corresponding staker or challenger pool info\n    \/\/\/ @param user Info related to the user\n    \/\/\/ @dev If the user is a challenger the function the amount can be withdrawn\n    \/\/\/ immediately, if the user is a staker, the amount is moved to the withdraw\n    \/\/\/ info and then the 24 hour waiting period starts\n    function _unstake(\n        uint256 amount,\n        bool isChallenger,\n        PoolSideInfo storage side,\n        UserInfo storage user\n    ) internal {\n        \/\/ Calculate how much the user has available to unstake, including the\n        \/\/ effects of any previously accrued decay.\n        \/\/   prevAmount = startAmount * decayMultiplier \/ startDecayMultiplier\n        uint256 prevAmount = _storedBalance(user, side);\n\n        if (prevAmount == amount) {\n            user.startAmount = 0;\n            user.startDecayMultiplier = 0;\n            side.numUsers = side.numUsers.sub(1);\n\n            \/\/ Remove from set of existing challengers\n            if (isChallenger) challengers.remove(msg.sender);\n        } else {\n            require(amount <= prevAmount, \"ANTE: Withdraw request exceeds balance.\");\n            user.startAmount = prevAmount.sub(amount);\n            \/\/ Reset the startDecayMultiplier for this user, since we've updated\n            \/\/ the startAmount to include any already-accrued decay.\n            user.startDecayMultiplier = side.decayMultiplier;\n        }\n        side.totalAmount = side.totalAmount.sub(amount);\n\n        if (isChallenger) _safeTransfer(msg.sender, amount);\n        else {\n            \/\/ Just initiate the withdraw if staker\n            UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n            unstakeUser.lastUnstakeTimestamp = block.timestamp;\n            unstakeUser.amount = unstakeUser.amount.add(amount);\n\n            withdrawInfo.totalAmount = withdrawInfo.totalAmount.add(amount);\n        }\n\n        emit Unstake(msg.sender, amount, isChallenger);\n    }\n\n    \/\/\/ @notice Computes the decay differences for staker and challenger pools\n    \/\/\/ @dev Function shared by getStoredBalance view function and internal\n    \/\/\/ decay computation\n    \/\/\/ @return decayMultiplierThisUpdate multiplier factor for this decay change\n    \/\/\/ @return decayThisUpdate amount of challenger value that's decayed in wei\n    function _computeDecay() internal view returns (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) {\n        decayThisUpdate = 0;\n        decayMultiplierThisUpdate = ONE;\n\n        if (block.number <= lastUpdateBlock) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n        \/\/ Stop charging decay if the test already failed.\n        if (pendingFailure) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n        \/\/ If we have no stakers or challengers, don't charge any decay.\n        uint256 totalStaked = stakingInfo.totalAmount;\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\n        if (totalStaked == 0 || totalChallengerStaked == 0) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n\n        uint256 numBlocks = block.number.sub(lastUpdateBlock);\n\n        \/\/ The rest of the function updates the new accrued decay amounts\n        \/\/   decayRateThisUpdate = DECAY_RATE_PER_BLOCK * numBlocks\n        \/\/   decayMultiplierThisUpdate = 1 - decayRateThisUpdate\n        \/\/   decayThisUpdate = totalChallengerStaked * decayRateThisUpdate\n        uint256 decayRateThisUpdate = DECAY_RATE_PER_BLOCK.mul(numBlocks);\n\n        \/\/ Failsafe to avoid underflow when calculating decayMultiplierThisUpdate\n        if (decayRateThisUpdate >= ONE) {\n            decayMultiplierThisUpdate = 0;\n            decayThisUpdate = totalChallengerStaked;\n        } else {\n            decayMultiplierThisUpdate = ONE.sub(decayRateThisUpdate);\n            decayThisUpdate = totalChallengerStaked.mulDiv(decayRateThisUpdate, ONE);\n        }\n    }\n\n    \/\/\/ @notice Calculates total amount of challenger capital eligible for payout.\n    \/\/\/ @dev Any challenger which stakes within 12 blocks prior to test failure\n    \/\/\/ will not get a payout but will be able to withdraw their capital\n    \/\/\/ (minus decay)\n    function _calculateChallengerEligibility() internal {\n        uint256 cutoffBlock = failedBlock.sub(CHALLENGER_BLOCK_DELAY);\n        for (uint256 i = 0; i < challengers.addresses.length; i++) {\n            address challenger = challengers.addresses[i];\n            if (eligibilityInfo.lastStakedBlock[challenger] < cutoffBlock) {\n                eligibilityInfo.eligibleAmount = eligibilityInfo.eligibleAmount.add(\n                    _storedBalance(challengerInfo.userInfo[challenger], challengerInfo)\n                );\n            }\n        }\n    }\n\n    \/\/\/ @notice Checks the connected Ante Test, also returns false if checkTestPasses reverts\n    \/\/\/ @return passes bool if the Ante Test passed\n    function _checkTestNoRevert() internal returns (bool) {\n        try anteTest.checkTestPasses() returns (bool passes) {\n            return passes;\n        } catch {\n            return false;\n        }\n    }\n\n    \/\/\/ @notice Calculates individual challenger payout\n    \/\/\/ @param user UserInfo for specified challenger\n    \/\/\/ @param challenger Address of challenger\n    \/\/\/ @dev This is only called after a test is failed, so it's calculated payouts\n    \/\/\/ are no longer estimates\n    \/\/\/ @return Payout amount for challenger in wei\n    function _calculateChallengerPayout(UserInfo storage user, address challenger) internal view returns (uint256) {\n        \/\/ Calculate this user's challenging balance.\n        uint256 amount = _storedBalance(user, challengerInfo);\n        \/\/ Calculate how much of the staking pool this user gets, and add that\n        \/\/ to the user's challenging balance.\n        if (eligibilityInfo.lastStakedBlock[challenger] < failedBlock.sub(CHALLENGER_BLOCK_DELAY)) {\n            amount = amount.add(amount.mulDiv(_remainingStake, eligibilityInfo.eligibleAmount));\n        }\n\n        return challenger == verifier ? amount.add(_bounty) : amount;\n    }\n\n    \/\/\/ @notice Get the stored balance held by user, including accrued decay\n    \/\/\/ @param user UserInfo of specified user\n    \/\/\/ @param side PoolSideInfo of where the user is located, either staker or challenger side\n    \/\/\/ @dev This includes accrued decay up to `lastUpdateBlock`\n    \/\/\/ @return Balance of the user in wei\n    function _storedBalance(UserInfo storage user, PoolSideInfo storage side) internal view returns (uint256) {\n        if (user.startAmount == 0) return 0;\n\n        require(user.startDecayMultiplier > 0, \"ANTE: Invalid startDecayMultiplier\");\n        return user.startAmount.mulDiv(side.decayMultiplier, user.startDecayMultiplier);\n    }\n\n    \/\/\/ @notice Transfer function for moving funds\n    \/\/\/ @param to Address to transfer funds to\n    \/\/\/ @param amount Amount to be transferred in wei\n    \/\/\/ @dev Safe transfer function, just in case a rounding error causes the\n    \/\/\/ pool to not have enough ETH\n    function _safeTransfer(address payable to, uint256 amount) internal {\n        to.transfer(_min(amount, address(this).balance));\n    }\n\n    \/\/\/ @notice Returns the minimum of 2 parameters\n    \/\/\/ @param a Value A\n    \/\/\/ @param b Value B\n    \/\/\/ @return Lower of a or b\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    \/\/\/ @notice Checks if the test has not failed yet\n    function _testNotFailed() internal {\n        require(!pendingFailure, \"ANTE: Test already failed.\");\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/math\/SafeMath.sol\";\nimport \"..\/interfaces\/IAntePool.sol\";\nimport \"..\/AnteTest.sol\";\n\n\/\/\/ @title Ante Pool contract states matches their ETH balance\n\/\/\/ @notice Connects to already deployed Ante Pools to check them\ncontract AntePoolTest is AnteTest(\"Ante Pool contract state matches eth balance\") {\n    using SafeMath for uint256;\n\n    \/\/\/ @param antePoolContracts array of Ante Pools to check against\n    constructor(address[] memory antePoolContracts) {\n        testedContracts = antePoolContracts;\n        protocolName = \"Ante\";\n    }\n\n    \/\/\/ @notice test checks if any Ante Pool's balance is less than supposed store values\n    \/\/\/ @return true if contract balance is greater than or equal to stored Ante Pool values\n    function checkTestPasses() public view override returns (bool) {\n        for (uint256 i = 0; i < testedContracts.length; i++) {\n            IAntePool antePool = IAntePool(testedContracts[i]);\n            \/\/ totalPaidOut should be 0 before test fails\n            if (\n                testedContracts[i].balance <\n                (\n                    antePool\n                        .getTotalChallengerStaked()\n                        .add(antePool.getTotalStaked())\n                        .add(antePool.getTotalPendingWithdraw())\n                        .sub(antePool.totalPaidOut())\n                )\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n END"}
{"prompt":"Ante doesnt lose 99% of its AVL\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/math\/SafeMath.sol\";\nimport \"@openzeppelin\/contracts\/utils\/Address.sol\";\n\nimport \".\/interfaces\/IAnteTest.sol\";\nimport \".\/libraries\/IterableSet.sol\";\nimport \".\/libraries\/FullMath.sol\";\nimport \".\/interfaces\/IAntePool.sol\";\n\n\/\/\/ @title Ante V0.5 Ante Pool smart contract\n\/\/\/ @notice Deploys an Ante Pool and connects with the Ante Test, manages pools and interactions with users\ncontract AntePool is IAntePool {\n    using SafeMath for uint256;\n    using FullMath for uint256;\n    using Address for address;\n    using IterableAddressSetUtils for IterableAddressSetUtils.IterableAddressSet;\n\n    \/\/\/ @notice Info related to a single user\n    struct UserInfo {\n        \/\/ How much ETH this user deposited.\n        uint256 startAmount;\n        \/\/ How much decay this side of the pool accrued between (0, this user's\n        \/\/ entry block), stored as a multiplier expressed as an 18-decimal\n        \/\/ mantissa. For example, if this side of the pool accrued a decay of\n        \/\/ 20% during this time period, we'd store 1.2e18 (staking side) or\n        \/\/ 0.8e18 (challenger side).\n        uint256 startDecayMultiplier;\n    }\n\n    \/\/\/ @notice Info related to one side of the pool\n    struct PoolSideInfo {\n        mapping(address => UserInfo) userInfo;\n        \/\/ Number of users on this side of the pool.\n        uint256 numUsers;\n        \/\/ Amount staked across all users on this side of the pool, as of\n        \/\/ `lastUpdateBlock`.`\n        uint256 totalAmount;\n        \/\/ How much decay this side of the pool accrued between (0,\n        \/\/ lastUpdateBlock), stored as a multiplier expressed as an 18-decimal\n        \/\/ mantissa. For example, if this side of the pool accrued a decay of\n        \/\/ 20% during this time period, we'd store 1.2e18 (staking side) or\n        \/\/ 0.8e18 (challenger side).\n        uint256 decayMultiplier;\n    }\n\n    \/\/\/ @notice Info related to eligible challengers\n    struct ChallengerEligibilityInfo {\n        \/\/ Used when test fails to determine which challengers should receive payout\n        \/\/ i.e., those which haven't staked within 12 blocks prior to test failure\n        mapping(address => uint256) lastStakedBlock;\n        uint256 eligibleAmount;\n    }\n\n    \/\/\/ @notice Info related to stakers who are currently withdrawing\n    struct StakerWithdrawInfo {\n        mapping(address => UserUnstakeInfo) userUnstakeInfo;\n        uint256 totalAmount;\n    }\n\n    \/\/\/ @notice Info related to a single withdrawing user\n    struct UserUnstakeInfo {\n        uint256 lastUnstakeTimestamp;\n        uint256 amount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    IAnteTest public override anteTest;\n    \/\/\/ @inheritdoc IAntePool\n    address public override factory;\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev pendingFailure set to true until pool is initialized to avoid\n    \/\/\/ people staking in uninitialized pools\n    bool public override pendingFailure = true;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override numTimesVerified;\n    \/\/\/ @dev Percent of staked amount alloted for verifier bounty\n    uint256 public constant VERIFIER_BOUNTY = 5;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override failedBlock;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override lastVerifiedBlock;\n    \/\/\/ @inheritdoc IAntePool\n    address public override verifier;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override numPaidOut;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override totalPaidOut;\n\n    \/\/\/ @dev pool can only be initialized once\n    bool internal _initialized = false;\n    \/\/\/ @dev Bounty amount, set when test fails\n    uint256 internal _bounty;\n    \/\/\/ @dev Total staked value, after bounty is removed\n    uint256 internal _remainingStake;\n\n    \/\/\/ @dev Amount of decay to charge each challengers ETH per block\n    \/\/\/ 100 gwei decay per block per ETH is ~20-25% decay per year\n    uint256 public constant DECAY_RATE_PER_BLOCK = 100 gwei;\n\n    \/\/\/ @dev Number of blocks a challenger must be staking before they are\n    \/\/\/ eligible for paytout on test failure\n    uint8 public constant CHALLENGER_BLOCK_DELAY = 12;\n\n    \/\/\/ @dev Minimum challenger stake is 0.01 ETH\n    uint256 public constant MIN_CHALLENGER_STAKE = 1e16;\n\n    \/\/\/ @dev Time after initiating withdraw before staker can finally withdraw capital,\n    \/\/\/ starts when staker initiates the unstake action\n    uint256 public constant UNSTAKE_DELAY = 24 hours;\n\n    \/\/\/ @dev convenience constant for 1 ether worth of wei\n    uint256 private constant ONE = 1e18;\n\n    \/\/\/ @inheritdoc IAntePool\n    PoolSideInfo public override stakingInfo;\n    \/\/\/ @inheritdoc IAntePool\n    PoolSideInfo public override challengerInfo;\n    \/\/\/ @inheritdoc IAntePool\n    ChallengerEligibilityInfo public override eligibilityInfo;\n    \/\/\/ @dev All addresses currently challenging the Ante Test\n    IterableAddressSetUtils.IterableAddressSet private challengers;\n    \/\/\/ @inheritdoc IAntePool\n    StakerWithdrawInfo public override withdrawInfo;\n\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override lastUpdateBlock;\n\n    \/\/\/ @notice Modifier function to make sure test hasn't failed yet\n    modifier testNotFailed() {\n        _testNotFailed();\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!_initialized, \"ANTE: Pool already initialized\");\n        _;\n    }\n\n    \/\/\/ @dev Ante Pools are deployed by Ante Pool Factory, and we store\n    \/\/\/ the address of the factory here\n    constructor() {\n        factory = msg.sender;\n        stakingInfo.decayMultiplier = ONE;\n        challengerInfo.decayMultiplier = ONE;\n        lastUpdateBlock = block.number;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function initialize(IAnteTest _anteTest) external override notInitialized {\n        require(msg.sender == factory, \"ANTE: only factory can initialize AntePool\");\n        require(address(_anteTest).isContract(), \"ANTE: AnteTest must be a smart contract\");\n        \/\/ Check that anteTest has checkTestPasses function and that it currently passes\n        \/\/ place check here to minimize reentrancy risk - most external function calls are locked\n        \/\/ while pendingFailure is true\n        require(_anteTest.checkTestPasses(), \"ANTE: AnteTest does not implement checkTestPasses or test fails\");\n\n        _initialized = true;\n        pendingFailure = false;\n        anteTest = _anteTest;\n    }\n\n    \/*****************************************************\n     * ================ USER INTERFACE ================= *\n     *****************************************************\/\n\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev Stake `msg.value` on the side given by `isChallenger`\n    function stake(bool isChallenger) external payable override testNotFailed {\n        uint256 amount = msg.value;\n        require(amount > 0, \"ANTE: Cannot stake zero\");\n\n        updateDecay();\n\n        PoolSideInfo storage side;\n        if (isChallenger) {\n            require(amount >= MIN_CHALLENGER_STAKE, \"ANTE: Challenger must stake more than 0.01 ETH\");\n            side = challengerInfo;\n\n            \/\/ Record challenger info for future use\n            \/\/ Challengers are not eligible for rewards if challenging within 12 block window of test failure\n            challengers.insert(msg.sender);\n            eligibilityInfo.lastStakedBlock[msg.sender] = block.number;\n        } else {\n            side = stakingInfo;\n        }\n\n        UserInfo storage user = side.userInfo[msg.sender];\n\n        \/\/ Calculate how much the user already has staked, including the\n        \/\/ effects of any previously accrued decay.\n        \/\/   prevAmount = startAmount * decayMultipiler \/ startDecayMultiplier\n        \/\/   newAmount = amount + prevAmount\n        if (user.startAmount > 0) {\n            user.startAmount = amount.add(_storedBalance(user, side));\n        } else {\n            user.startAmount = amount;\n            side.numUsers = side.numUsers.add(1);\n        }\n        side.totalAmount = side.totalAmount.add(amount);\n\n        \/\/ Reset the startDecayMultiplier for this user, since we've updated\n        \/\/ the startAmount to include any already-accrued decay.\n        user.startDecayMultiplier = side.decayMultiplier;\n\n        emit Stake(msg.sender, amount, isChallenger);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev Unstake `amount` on the side given by `isChallenger`.\n    function unstake(uint256 amount, bool isChallenger) external override testNotFailed {\n        require(amount > 0, \"ANTE: Cannot unstake 0.\");\n\n        updateDecay();\n\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\n\n        UserInfo storage user = side.userInfo[msg.sender];\n        _unstake(amount, isChallenger, side, user);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function unstakeAll(bool isChallenger) external override testNotFailed {\n        updateDecay();\n\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\n\n        UserInfo storage user = side.userInfo[msg.sender];\n\n        uint256 amount = _storedBalance(user, side);\n        require(amount > 0, \"ANTE: Nothing to unstake\");\n\n        _unstake(amount, isChallenger, side, user);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function withdrawStake() external override testNotFailed {\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n\n        require(\n            unstakeUser.lastUnstakeTimestamp < block.timestamp - UNSTAKE_DELAY,\n            \"ANTE: must wait 24 hours to withdraw stake\"\n        );\n        require(unstakeUser.amount > 0, \"ANTE: Nothing to withdraw\");\n\n        uint256 amount = unstakeUser.amount;\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\n        unstakeUser.amount = 0;\n\n        _safeTransfer(msg.sender, amount);\n\n        emit WithdrawStake(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function cancelPendingWithdraw() external override testNotFailed {\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n\n        require(unstakeUser.amount > 0, \"ANTE: No pending withdraw balance\");\n        uint256 amount = unstakeUser.amount;\n        unstakeUser.amount = 0;\n\n        updateDecay();\n\n        UserInfo storage user = stakingInfo.userInfo[msg.sender];\n        if (user.startAmount > 0) {\n            user.startAmount = amount.add(_storedBalance(user, stakingInfo));\n        } else {\n            user.startAmount = amount;\n            stakingInfo.numUsers = stakingInfo.numUsers.add(1);\n        }\n        stakingInfo.totalAmount = stakingInfo.totalAmount.add(amount);\n        user.startDecayMultiplier = stakingInfo.decayMultiplier;\n\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\n\n        emit CancelWithdraw(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function checkTest() external override testNotFailed {\n        require(challengers.exists(msg.sender), \"ANTE: Only challengers can checkTest\");\n        require(\n            block.number.sub(eligibilityInfo.lastStakedBlock[msg.sender]) > CHALLENGER_BLOCK_DELAY,\n            \"ANTE: must wait 12 blocks after challenging to call checkTest\"\n        );\n\n        numTimesVerified = numTimesVerified.add(1);\n        lastVerifiedBlock = block.number;\n        emit TestChecked(msg.sender);\n        if (!_checkTestNoRevert()) {\n            updateDecay();\n            verifier = msg.sender;\n            failedBlock = block.number;\n            pendingFailure = true;\n\n            _calculateChallengerEligibility();\n            _bounty = getVerifierBounty();\n\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n            _remainingStake = totalStake.sub(_bounty);\n\n            emit FailureOccurred(msg.sender);\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function claim() external override {\n        require(pendingFailure, \"ANTE: Test has not failed\");\n\n        UserInfo storage user = challengerInfo.userInfo[msg.sender];\n        require(user.startAmount > 0, \"ANTE: No Challenger Staking balance\");\n\n        uint256 amount = _calculateChallengerPayout(user, msg.sender);\n        \/\/ Zero out the user so they can't claim again.\n        user.startAmount = 0;\n\n        numPaidOut = numPaidOut.add(1);\n        totalPaidOut = totalPaidOut.add(amount);\n\n        _safeTransfer(msg.sender, amount);\n        emit ClaimPaid(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function updateDecay() public override {\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\n\n        lastUpdateBlock = block.number;\n\n        if (decayThisUpdate == 0) return;\n\n        uint256 totalStaked = stakingInfo.totalAmount;\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\n\n        \/\/ update totoal accrued decay amounts for challengers\n        \/\/ decayMultiplier for challengers = decayMultiplier for challengers * decayMultiplierThisUpdate\n        \/\/ totalChallengerStaked = totalChallengerStaked - decayThisUpdate\n        challengerInfo.decayMultiplier = challengerInfo.decayMultiplier.mulDiv(decayMultiplierThisUpdate, ONE);\n        challengerInfo.totalAmount = totalChallengerStaked.sub(decayThisUpdate);\n\n        \/\/ Update the new accrued decay amounts for stakers.\n        \/\/   totalStaked_new = totalStaked_old + decayThisUpdate\n        \/\/   decayMultipilerThisUpdate = totalStaked_new \/ totalStaked_old\n        \/\/   decayMultiplier_staker = decayMultiplier_staker * decayMultiplierThisUpdate\n        uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\n\n        stakingInfo.decayMultiplier = stakingInfo.decayMultiplier.mulDiv(totalStakedNew, totalStaked);\n        stakingInfo.totalAmount = totalStakedNew;\n    }\n\n    \/*****************************************************\n     * ================ VIEW FUNCTIONS ================= *\n     *****************************************************\/\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalChallengerStaked() external view override returns (uint256) {\n        return challengerInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalStaked() external view override returns (uint256) {\n        return stakingInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalPendingWithdraw() external view override returns (uint256) {\n        return withdrawInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalChallengerEligibleBalance() external view override returns (uint256) {\n        return eligibilityInfo.eligibleAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getChallengerPayout(address challenger) external view override returns (uint256) {\n        UserInfo storage user = challengerInfo.userInfo[challenger];\n        require(user.startAmount > 0, \"ANTE: No Challenger Staking balance\");\n\n        \/\/ If called before test failure returns an estimate\n        if (pendingFailure) {\n            return _calculateChallengerPayout(user, challenger);\n        } else {\n            uint256 amount = _storedBalance(user, challengerInfo);\n            uint256 bounty = getVerifierBounty();\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n\n            return amount.add(amount.mulDiv(totalStake.sub(bounty), challengerInfo.totalAmount));\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getStoredBalance(address _user, bool isChallenger) external view override returns (uint256) {\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\n\n        UserInfo storage user = isChallenger ? challengerInfo.userInfo[_user] : stakingInfo.userInfo[_user];\n\n        if (user.startAmount == 0) return 0;\n\n        require(user.startDecayMultiplier > 0, \"ANTE: Invalid startDecayMultiplier\");\n\n        uint256 decayMultiplier;\n\n        if (isChallenger) {\n            decayMultiplier = challengerInfo.decayMultiplier.mul(decayMultiplierThisUpdate).div(1e18);\n        } else {\n            uint256 totalStaked = stakingInfo.totalAmount;\n            uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\n            decayMultiplier = stakingInfo.decayMultiplier.mul(totalStakedNew).div(totalStaked);\n        }\n\n        return user.startAmount.mulDiv(decayMultiplier, user.startDecayMultiplier);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getPendingWithdrawAmount(address _user) external view override returns (uint256) {\n        return withdrawInfo.userUnstakeInfo[_user].amount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getPendingWithdrawAllowedTime(address _user) external view override returns (uint256) {\n        UserUnstakeInfo storage user = withdrawInfo.userUnstakeInfo[_user];\n        require(user.amount > 0, \"ANTE: nothing to withdraw\");\n\n        return user.lastUnstakeTimestamp.add(UNSTAKE_DELAY);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getCheckTestAllowedBlock(address _user) external view override returns (uint256) {\n        return eligibilityInfo.lastStakedBlock[_user].add(CHALLENGER_BLOCK_DELAY);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getUserStartAmount(address _user, bool isChallenger) external view override returns (uint256) {\n        return isChallenger ? challengerInfo.userInfo[_user].startAmount : stakingInfo.userInfo[_user].startAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getVerifierBounty() public view override returns (uint256) {\n        uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n        return totalStake.mul(VERIFIER_BOUNTY).div(100);\n    }\n\n    \/*****************************************************\n     * =============== INTERNAL HELPERS ================ *\n     *****************************************************\/\n\n    \/\/\/ @notice Internal function activating the unstaking action for staker or challengers\n    \/\/\/ @param amount Amount to be removed in wei\n    \/\/\/ @param isChallenger True if user is a challenger\n    \/\/\/ @param side Corresponding staker or challenger pool info\n    \/\/\/ @param user Info related to the user\n    \/\/\/ @dev If the user is a challenger the function the amount can be withdrawn\n    \/\/\/ immediately, if the user is a staker, the amount is moved to the withdraw\n    \/\/\/ info and then the 24 hour waiting period starts\n    function _unstake(\n        uint256 amount,\n        bool isChallenger,\n        PoolSideInfo storage side,\n        UserInfo storage user\n    ) internal {\n        \/\/ Calculate how much the user has available to unstake, including the\n        \/\/ effects of any previously accrued decay.\n        \/\/   prevAmount = startAmount * decayMultiplier \/ startDecayMultiplier\n        uint256 prevAmount = _storedBalance(user, side);\n\n        if (prevAmount == amount) {\n            user.startAmount = 0;\n            user.startDecayMultiplier = 0;\n            side.numUsers = side.numUsers.sub(1);\n\n            \/\/ Remove from set of existing challengers\n            if (isChallenger) challengers.remove(msg.sender);\n        } else {\n            require(amount <= prevAmount, \"ANTE: Withdraw request exceeds balance.\");\n            user.startAmount = prevAmount.sub(amount);\n            \/\/ Reset the startDecayMultiplier for this user, since we've updated\n            \/\/ the startAmount to include any already-accrued decay.\n            user.startDecayMultiplier = side.decayMultiplier;\n        }\n        side.totalAmount = side.totalAmount.sub(amount);\n\n        if (isChallenger) _safeTransfer(msg.sender, amount);\n        else {\n            \/\/ Just initiate the withdraw if staker\n            UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n            unstakeUser.lastUnstakeTimestamp = block.timestamp;\n            unstakeUser.amount = unstakeUser.amount.add(amount);\n\n            withdrawInfo.totalAmount = withdrawInfo.totalAmount.add(amount);\n        }\n\n        emit Unstake(msg.sender, amount, isChallenger);\n    }\n\n    \/\/\/ @notice Computes the decay differences for staker and challenger pools\n    \/\/\/ @dev Function shared by getStoredBalance view function and internal\n    \/\/\/ decay computation\n    \/\/\/ @return decayMultiplierThisUpdate multiplier factor for this decay change\n    \/\/\/ @return decayThisUpdate amount of challenger value that's decayed in wei\n    function _computeDecay() internal view returns (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) {\n        decayThisUpdate = 0;\n        decayMultiplierThisUpdate = ONE;\n\n        if (block.number <= lastUpdateBlock) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n        \/\/ Stop charging decay if the test already failed.\n        if (pendingFailure) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n        \/\/ If we have no stakers or challengers, don't charge any decay.\n        uint256 totalStaked = stakingInfo.totalAmount;\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\n        if (totalStaked == 0 || totalChallengerStaked == 0) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n\n        uint256 numBlocks = block.number.sub(lastUpdateBlock);\n\n        \/\/ The rest of the function updates the new accrued decay amounts\n        \/\/   decayRateThisUpdate = DECAY_RATE_PER_BLOCK * numBlocks\n        \/\/   decayMultiplierThisUpdate = 1 - decayRateThisUpdate\n        \/\/   decayThisUpdate = totalChallengerStaked * decayRateThisUpdate\n        uint256 decayRateThisUpdate = DECAY_RATE_PER_BLOCK.mul(numBlocks);\n\n        \/\/ Failsafe to avoid underflow when calculating decayMultiplierThisUpdate\n        if (decayRateThisUpdate >= ONE) {\n            decayMultiplierThisUpdate = 0;\n            decayThisUpdate = totalChallengerStaked;\n        } else {\n            decayMultiplierThisUpdate = ONE.sub(decayRateThisUpdate);\n            decayThisUpdate = totalChallengerStaked.mulDiv(decayRateThisUpdate, ONE);\n        }\n    }\n\n    \/\/\/ @notice Calculates total amount of challenger capital eligible for payout.\n    \/\/\/ @dev Any challenger which stakes within 12 blocks prior to test failure\n    \/\/\/ will not get a payout but will be able to withdraw their capital\n    \/\/\/ (minus decay)\n    function _calculateChallengerEligibility() internal {\n        uint256 cutoffBlock = failedBlock.sub(CHALLENGER_BLOCK_DELAY);\n        for (uint256 i = 0; i < challengers.addresses.length; i++) {\n            address challenger = challengers.addresses[i];\n            if (eligibilityInfo.lastStakedBlock[challenger] < cutoffBlock) {\n                eligibilityInfo.eligibleAmount = eligibilityInfo.eligibleAmount.add(\n                    _storedBalance(challengerInfo.userInfo[challenger], challengerInfo)\n                );\n            }\n        }\n    }\n\n    \/\/\/ @notice Checks the connected Ante Test, also returns false if checkTestPasses reverts\n    \/\/\/ @return passes bool if the Ante Test passed\n    function _checkTestNoRevert() internal returns (bool) {\n        try anteTest.checkTestPasses() returns (bool passes) {\n            return passes;\n        } catch {\n            return false;\n        }\n    }\n\n    \/\/\/ @notice Calculates individual challenger payout\n    \/\/\/ @param user UserInfo for specified challenger\n    \/\/\/ @param challenger Address of challenger\n    \/\/\/ @dev This is only called after a test is failed, so it's calculated payouts\n    \/\/\/ are no longer estimates\n    \/\/\/ @return Payout amount for challenger in wei\n    function _calculateChallengerPayout(UserInfo storage user, address challenger) internal view returns (uint256) {\n        \/\/ Calculate this user's challenging balance.\n        uint256 amount = _storedBalance(user, challengerInfo);\n        \/\/ Calculate how much of the staking pool this user gets, and add that\n        \/\/ to the user's challenging balance.\n        if (eligibilityInfo.lastStakedBlock[challenger] < failedBlock.sub(CHALLENGER_BLOCK_DELAY)) {\n            amount = amount.add(amount.mulDiv(_remainingStake, eligibilityInfo.eligibleAmount));\n        }\n\n        return challenger == verifier ? amount.add(_bounty) : amount;\n    }\n\n    \/\/\/ @notice Get the stored balance held by user, including accrued decay\n    \/\/\/ @param user UserInfo of specified user\n    \/\/\/ @param side PoolSideInfo of where the user is located, either staker or challenger side\n    \/\/\/ @dev This includes accrued decay up to `lastUpdateBlock`\n    \/\/\/ @return Balance of the user in wei\n    function _storedBalance(UserInfo storage user, PoolSideInfo storage side) internal view returns (uint256) {\n        if (user.startAmount == 0) return 0;\n\n        require(user.startDecayMultiplier > 0, \"ANTE: Invalid startDecayMultiplier\");\n        return user.startAmount.mulDiv(side.decayMultiplier, user.startDecayMultiplier);\n    }\n\n    \/\/\/ @notice Transfer function for moving funds\n    \/\/\/ @param to Address to transfer funds to\n    \/\/\/ @param amount Amount to be transferred in wei\n    \/\/\/ @dev Safe transfer function, just in case a rounding error causes the\n    \/\/\/ pool to not have enough ETH\n    function _safeTransfer(address payable to, uint256 amount) internal {\n        to.transfer(_min(amount, address(this).balance));\n    }\n\n    \/\/\/ @notice Returns the minimum of 2 parameters\n    \/\/\/ @param a Value A\n    \/\/\/ @param b Value B\n    \/\/\/ @return Lower of a or b\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    \/\/\/ @notice Checks if the test has not failed yet\n    function _testNotFailed() internal {\n        require(!pendingFailure, \"ANTE: Test already failed.\");\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/math\/SafeMath.sol\";\nimport \"..\/AnteTest.sol\";\n\n\/\/\/ @title Ante doesn't lose 99% of its AVL Test\n\/\/\/ @notice Ante Test to check that tested Ante Pools don't lose 99% of their ETH from the time this test is deployed\ncontract AnteAVLDropTest is AnteTest(\"Ante doesnt lose 99% of its AVL\") {\n    using SafeMath for uint256;\n\n    uint256 public avlThreshold;\n\n    \/\/\/ @dev Array of contract addresses to test should be passed in when deploying\n    \/\/\/ @param _testedContracts array of addresses to Ante Pools to check\n    constructor(address[] memory _testedContracts) {\n        protocolName = \"Ante\";\n        testedContracts = _testedContracts;\n\n        \/\/ Calculate test failure threshold using 99% drop in total AVL at time of deploy\n        avlThreshold = getCurrentAVL().div(100);\n    }\n\n    \/\/\/ @notice checks if the total AVL across tested contracts is less than the failure threshold\n    \/\/\/ @return true if total balance across tested contracts is greater than or equal to avlThreshold\n    function checkTestPasses() public view override returns (bool) {\n        return getCurrentAVL() >= avlThreshold;\n    }\n\n    \/\/\/ @notice sums up the current total AVL across tested contracts\n    \/\/\/ @return sum of current balances across tested contracts\n    function getCurrentAVL() public view returns (uint256) {\n        uint256 currentAVL;\n\n        for (uint256 i = 0; i < testedContracts.length; i++) {\n            currentAVL = currentAVL.add(testedContracts[i].balance);\n        }\n\n        return currentAVL;\n    }\n}\n END"}
{"prompt":"Ante test states are synchronized. Checks that all pools linked to an Ante Test share the same pass\/fail state\n\n\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.8.0;\n\nimport \".\/AntePool.sol\";\nimport \".\/interfaces\/IAnteTest.sol\";\nimport \".\/interfaces\/IAntePool.sol\";\nimport \".\/interfaces\/IAntePoolFactory.sol\";\nimport \".\/interfaces\/IAntePoolFactoryController.sol\";\nimport \"@openzeppelin\/contracts\/security\/ReentrancyGuard.sol\";\n\n\/\/\/ @title Ante V0.6 Ante Pool Factory smart contract\n\/\/\/ @notice Contract that creates an AntePool wrapper for an AnteTest\ncontract AntePoolFactory is IAntePoolFactory, ReentrancyGuard {\n    struct TestStateInfo {\n        bool hasFailed;\n        address verifier;\n        uint256 failedBlock;\n        uint256 failedTimestamp;\n    }\n\n    mapping(address => TestStateInfo) private stateByTest;\n\n    \/\/ Stores all the pools associated with a test\n    mapping(address => address[]) public poolsByTest;\n    \/\/\/ @inheritdoc IAntePoolFactory\n    mapping(bytes32 => address) public override poolByConfig;\n    \/\/\/ @inheritdoc IAntePoolFactory\n    address[] public override allPools;\n\n    \/\/\/ @dev The maximum number of pools allowed to be created for an Ante Test\n    uint256 public constant MAX_POOLS_PER_TEST = 10;\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    IAntePoolFactoryController public override controller;\n\n    \/\/\/ @param _controller The address of the Ante Factory Controller\n    constructor(address _controller) {\n        controller = IAntePoolFactoryController(_controller);\n    }\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    function createPool(\n        address testAddr,\n        address tokenAddr,\n        uint256 payoutRatio,\n        uint256 decayRate,\n        uint256 authorRewardRate\n    ) external override returns (address testPool) {\n        \/\/ Checks that a non-zero AnteTest address is passed in and that\n        \/\/ an AntePool has not already been created for that AnteTest\n        require(testAddr != address(0), \"ANTE: Test address is 0\");\n        require(!stateByTest[testAddr].hasFailed, \"ANTE: Test has previously failed\");\n        require(controller.isTokenAllowed(tokenAddr), \"ANTE: Token not allowed\");\n        require(poolsByTest[testAddr].length < MAX_POOLS_PER_TEST, \"ANTE: Max pools per test reached\");\n\n        uint256 tokenMinimum = controller.getTokenMinimum(tokenAddr);\n        bytes32 configHash = keccak256(\n            abi.encodePacked(testAddr, tokenAddr, tokenMinimum, payoutRatio, decayRate, authorRewardRate)\n        );\n        address poolAddr = poolByConfig[configHash];\n        require(poolAddr == address(0), \"ANTE: Pool with the same config already exists\");\n\n        IAnteTest anteTest = IAnteTest(testAddr);\n\n        testPool = address(new AntePool{salt: configHash}(controller.antePoolLogicAddr()));\n\n        require(testPool != address(0), \"ANTE: Pool creation failed\");\n\n        poolsByTest[testAddr].push(testPool);\n        poolByConfig[configHash] = testPool;\n        allPools.push(testPool);\n\n        IAntePool(testPool).initialize(\n            anteTest,\n            IERC20(tokenAddr),\n            tokenMinimum,\n            decayRate,\n            payoutRatio,\n            authorRewardRate\n        );\n\n        emit AntePoolCreated(\n            testAddr,\n            tokenAddr,\n            tokenMinimum,\n            payoutRatio,\n            decayRate,\n            authorRewardRate,\n            testPool,\n            msg.sender\n        );\n    }\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    function hasTestFailed(address testAddr) external view override returns (bool) {\n        return stateByTest[testAddr].hasFailed;\n    }\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    function checkTestWithState(\n        bytes memory _testState,\n        address verifier,\n        bytes32 poolConfig\n    ) public override nonReentrant {\n        address poolAddr = poolByConfig[poolConfig];\n        require(poolAddr == msg.sender, \"ANTE: Must be called by a pool\");\n\n        IAntePool pool = IAntePool(msg.sender);\n        (, , uint256 claimableShares, ) = pool.getChallengerInfo(verifier);\n        require(claimableShares > 0, \"ANTE: Only confirmed challengers can checkTest\");\n        require(\n            pool.getCheckTestAllowedBlock(verifier) < block.number,\n            \"ANTE: must wait 12 blocks after challenging to call checkTest\"\n        );\n        IAnteTest anteTest = pool.anteTest();\n        bool hasFailed = stateByTest[address(anteTest)].hasFailed;\n        require(!hasFailed, \"ANTE: Test already failed.\");\n\n        pool.updateVerifiedState(verifier);\n        if (!_checkTestNoRevert(anteTest, _testState)) {\n            _setFailureStateForTest(address(anteTest), verifier);\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    function getPoolsByTest(address testAddr) external view override returns (address[] memory) {\n        return poolsByTest[testAddr];\n    }\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    function getNumPoolsByTest(address testAddr) external view override returns (uint256) {\n        return poolsByTest[testAddr].length;\n    }\n\n    \/\/\/ @inheritdoc IAntePoolFactory\n    function numPools() external view override returns (uint256) {\n        return allPools.length;\n    }\n\n    \/*****************************************************\n     * =============== INTERNAL HELPERS ================ *\n     *****************************************************\/\n\n    \/\/\/ @notice Checks the connected Ante Test, also returns true if\n    \/\/\/ setStateAndCheckTestPasses or checkTestPasses reverts\n    \/\/\/ @return passes bool if the Ante Test passed\n    function _checkTestNoRevert(IAnteTest anteTest, bytes memory _testState) internal returns (bool) {\n        \/\/ This condition replicates the logic from AnteTest(v0.6).setStateAndCheckTestPasses\n        \/\/ It is used for backward compatibility with v0.5 tests\n        if (_testState.length > 0) {\n            try anteTest.setStateAndCheckTestPasses(_testState) returns (bool passes) {\n                return passes;\n            } catch {\n                return true;\n            }\n        }\n\n        try anteTest.checkTestPasses() returns (bool passes) {\n            return passes;\n        } catch {\n            return true;\n        }\n    }\n\n    function _setFailureStateForTest(address testAddr, address verifier) internal {\n        TestStateInfo storage testState = stateByTest[testAddr];\n        testState.hasFailed = true;\n        testState.failedBlock = block.number;\n        testState.failedTimestamp = block.timestamp;\n        testState.verifier = verifier;\n\n        address[] memory pools = poolsByTest[testAddr];\n        uint256 numPoolsByTest = pools.length;\n        for (uint256 i = 0; i < numPoolsByTest; i++) {\n            try IAntePool(pools[i]).updateFailureState(verifier) {} catch {\n                emit PoolFailureReverted();\n            }\n        }\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.8.0;\n\nimport \"..\/libraries\/ante-v06-core\/AnteTest.sol\";\nimport \"..\/libraries\/ante-v06-core\/interfaces\/IAntePool.sol\";\nimport \"..\/libraries\/ante-v06-core\/interfaces\/IAntePoolFactory.sol\";\n\n\/\/not exposed so we just copy\nstruct TestStateInfo {\n    bool hasFailed;\n    address verifier;\n    uint256 failedBlock;\n    uint256 failedTimestamp;\n}\n\n\n\/\/\/ @title Ante's test states are synchronized\n\/\/\/ @notice Ante Test to check that each pool for a given test have failedBlock and failedTimestamp synchronized with the factory's TestStateInfo\ncontract AnteFailedTestSynchronized is AnteTest(\"Ante test states are synchronized\") {\n    address public immutable factoryContractAddr;\n\n    address private testAddr = address(0);\n\n    \/\/\/ @param _factoryContractAddr Ante factory address\n    constructor(address _factoryContractAddr) {\n        protocolName = \"Ante\";\n        factoryContractAddr = _factoryContractAddr;\n        testedContracts = [factoryContractAddr];\n    }\n\n    function checkTestPasses() public view override returns (bool) {\n        IAntePoolFactory factory = IAntePoolFactory(factoryContractAddr);\n        require(factory.getPoolsByTest(testAddr).length > 0, \"ANTE: testAddr is not a registered test\"); \/\/ must have at least 1 pool\n\n        bool testHasFailed = factory.hasTestFailed(testAddr);\n        address[] memory pools = factory.getPoolsByTest(testAddr);\n\n        for (uint i = 0; i < pools.length; i += 1) { \/\/ capped at MAX_POOLS_PER_TEST=10 so gas bombing shouldn't be a problem\n            IAntePool pool = IAntePool(pools[i]);\n            if (testHasFailed && pool.failedBlock() == 0) return false;\n            if (testHasFailed && pool.failedTimestamp() == 0) return false;\n        }\n\n        return true;\n    }\n    \/\/\/ @param data the state passed by checkTestWithState\n    function _setState(bytes memory data) internal override virtual {\n        testAddr = abi.decode(data, (address));\n    }\n\n    function getStateTypes() external pure override returns (string memory) {\n        return \"address\";\n    }\n\n    function getStateNames() external pure override returns (string memory) {\n        return \"testAddr\";\n    }\n} END"}
{"prompt":"Ante Pool cannot pay out before failure\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/math\/SafeMath.sol\";\nimport \"@openzeppelin\/contracts\/utils\/Address.sol\";\n\nimport \".\/interfaces\/IAnteTest.sol\";\nimport \".\/libraries\/IterableSet.sol\";\nimport \".\/libraries\/FullMath.sol\";\nimport \".\/interfaces\/IAntePool.sol\";\n\n\/\/\/ @title Ante V0.5 Ante Pool smart contract\n\/\/\/ @notice Deploys an Ante Pool and connects with the Ante Test, manages pools and interactions with users\ncontract AntePool is IAntePool {\n    using SafeMath for uint256;\n    using FullMath for uint256;\n    using Address for address;\n    using IterableAddressSetUtils for IterableAddressSetUtils.IterableAddressSet;\n\n    \/\/\/ @notice Info related to a single user\n    struct UserInfo {\n        \/\/ How much ETH this user deposited.\n        uint256 startAmount;\n        \/\/ How much decay this side of the pool accrued between (0, this user's\n        \/\/ entry block), stored as a multiplier expressed as an 18-decimal\n        \/\/ mantissa. For example, if this side of the pool accrued a decay of\n        \/\/ 20% during this time period, we'd store 1.2e18 (staking side) or\n        \/\/ 0.8e18 (challenger side).\n        uint256 startDecayMultiplier;\n    }\n\n    \/\/\/ @notice Info related to one side of the pool\n    struct PoolSideInfo {\n        mapping(address => UserInfo) userInfo;\n        \/\/ Number of users on this side of the pool.\n        uint256 numUsers;\n        \/\/ Amount staked across all users on this side of the pool, as of\n        \/\/ `lastUpdateBlock`.`\n        uint256 totalAmount;\n        \/\/ How much decay this side of the pool accrued between (0,\n        \/\/ lastUpdateBlock), stored as a multiplier expressed as an 18-decimal\n        \/\/ mantissa. For example, if this side of the pool accrued a decay of\n        \/\/ 20% during this time period, we'd store 1.2e18 (staking side) or\n        \/\/ 0.8e18 (challenger side).\n        uint256 decayMultiplier;\n    }\n\n    \/\/\/ @notice Info related to eligible challengers\n    struct ChallengerEligibilityInfo {\n        \/\/ Used when test fails to determine which challengers should receive payout\n        \/\/ i.e., those which haven't staked within 12 blocks prior to test failure\n        mapping(address => uint256) lastStakedBlock;\n        uint256 eligibleAmount;\n    }\n\n    \/\/\/ @notice Info related to stakers who are currently withdrawing\n    struct StakerWithdrawInfo {\n        mapping(address => UserUnstakeInfo) userUnstakeInfo;\n        uint256 totalAmount;\n    }\n\n    \/\/\/ @notice Info related to a single withdrawing user\n    struct UserUnstakeInfo {\n        uint256 lastUnstakeTimestamp;\n        uint256 amount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    IAnteTest public override anteTest;\n    \/\/\/ @inheritdoc IAntePool\n    address public override factory;\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev pendingFailure set to true until pool is initialized to avoid\n    \/\/\/ people staking in uninitialized pools\n    bool public override pendingFailure = true;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override numTimesVerified;\n    \/\/\/ @dev Percent of staked amount alloted for verifier bounty\n    uint256 public constant VERIFIER_BOUNTY = 5;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override failedBlock;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override lastVerifiedBlock;\n    \/\/\/ @inheritdoc IAntePool\n    address public override verifier;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override numPaidOut;\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override totalPaidOut;\n\n    \/\/\/ @dev pool can only be initialized once\n    bool internal _initialized = false;\n    \/\/\/ @dev Bounty amount, set when test fails\n    uint256 internal _bounty;\n    \/\/\/ @dev Total staked value, after bounty is removed\n    uint256 internal _remainingStake;\n\n    \/\/\/ @dev Amount of decay to charge each challengers ETH per block\n    \/\/\/ 100 gwei decay per block per ETH is ~20-25% decay per year\n    uint256 public constant DECAY_RATE_PER_BLOCK = 100 gwei;\n\n    \/\/\/ @dev Number of blocks a challenger must be staking before they are\n    \/\/\/ eligible for paytout on test failure\n    uint8 public constant CHALLENGER_BLOCK_DELAY = 12;\n\n    \/\/\/ @dev Minimum challenger stake is 0.01 ETH\n    uint256 public constant MIN_CHALLENGER_STAKE = 1e16;\n\n    \/\/\/ @dev Time after initiating withdraw before staker can finally withdraw capital,\n    \/\/\/ starts when staker initiates the unstake action\n    uint256 public constant UNSTAKE_DELAY = 24 hours;\n\n    \/\/\/ @dev convenience constant for 1 ether worth of wei\n    uint256 private constant ONE = 1e18;\n\n    \/\/\/ @inheritdoc IAntePool\n    PoolSideInfo public override stakingInfo;\n    \/\/\/ @inheritdoc IAntePool\n    PoolSideInfo public override challengerInfo;\n    \/\/\/ @inheritdoc IAntePool\n    ChallengerEligibilityInfo public override eligibilityInfo;\n    \/\/\/ @dev All addresses currently challenging the Ante Test\n    IterableAddressSetUtils.IterableAddressSet private challengers;\n    \/\/\/ @inheritdoc IAntePool\n    StakerWithdrawInfo public override withdrawInfo;\n\n    \/\/\/ @inheritdoc IAntePool\n    uint256 public override lastUpdateBlock;\n\n    \/\/\/ @notice Modifier function to make sure test hasn't failed yet\n    modifier testNotFailed() {\n        _testNotFailed();\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!_initialized, \"ANTE: Pool already initialized\");\n        _;\n    }\n\n    \/\/\/ @dev Ante Pools are deployed by Ante Pool Factory, and we store\n    \/\/\/ the address of the factory here\n    constructor() {\n        factory = msg.sender;\n        stakingInfo.decayMultiplier = ONE;\n        challengerInfo.decayMultiplier = ONE;\n        lastUpdateBlock = block.number;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function initialize(IAnteTest _anteTest) external override notInitialized {\n        require(msg.sender == factory, \"ANTE: only factory can initialize AntePool\");\n        require(address(_anteTest).isContract(), \"ANTE: AnteTest must be a smart contract\");\n        \/\/ Check that anteTest has checkTestPasses function and that it currently passes\n        \/\/ place check here to minimize reentrancy risk - most external function calls are locked\n        \/\/ while pendingFailure is true\n        require(_anteTest.checkTestPasses(), \"ANTE: AnteTest does not implement checkTestPasses or test fails\");\n\n        _initialized = true;\n        pendingFailure = false;\n        anteTest = _anteTest;\n    }\n\n    \/*****************************************************\n     * ================ USER INTERFACE ================= *\n     *****************************************************\/\n\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev Stake `msg.value` on the side given by `isChallenger`\n    function stake(bool isChallenger) external payable override testNotFailed {\n        uint256 amount = msg.value;\n        require(amount > 0, \"ANTE: Cannot stake zero\");\n\n        updateDecay();\n\n        PoolSideInfo storage side;\n        if (isChallenger) {\n            require(amount >= MIN_CHALLENGER_STAKE, \"ANTE: Challenger must stake more than 0.01 ETH\");\n            side = challengerInfo;\n\n            \/\/ Record challenger info for future use\n            \/\/ Challengers are not eligible for rewards if challenging within 12 block window of test failure\n            challengers.insert(msg.sender);\n            eligibilityInfo.lastStakedBlock[msg.sender] = block.number;\n        } else {\n            side = stakingInfo;\n        }\n\n        UserInfo storage user = side.userInfo[msg.sender];\n\n        \/\/ Calculate how much the user already has staked, including the\n        \/\/ effects of any previously accrued decay.\n        \/\/   prevAmount = startAmount * decayMultipiler \/ startDecayMultiplier\n        \/\/   newAmount = amount + prevAmount\n        if (user.startAmount > 0) {\n            user.startAmount = amount.add(_storedBalance(user, side));\n        } else {\n            user.startAmount = amount;\n            side.numUsers = side.numUsers.add(1);\n        }\n        side.totalAmount = side.totalAmount.add(amount);\n\n        \/\/ Reset the startDecayMultiplier for this user, since we've updated\n        \/\/ the startAmount to include any already-accrued decay.\n        user.startDecayMultiplier = side.decayMultiplier;\n\n        emit Stake(msg.sender, amount, isChallenger);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    \/\/\/ @dev Unstake `amount` on the side given by `isChallenger`.\n    function unstake(uint256 amount, bool isChallenger) external override testNotFailed {\n        require(amount > 0, \"ANTE: Cannot unstake 0.\");\n\n        updateDecay();\n\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\n\n        UserInfo storage user = side.userInfo[msg.sender];\n        _unstake(amount, isChallenger, side, user);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function unstakeAll(bool isChallenger) external override testNotFailed {\n        updateDecay();\n\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\n\n        UserInfo storage user = side.userInfo[msg.sender];\n\n        uint256 amount = _storedBalance(user, side);\n        require(amount > 0, \"ANTE: Nothing to unstake\");\n\n        _unstake(amount, isChallenger, side, user);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function withdrawStake() external override testNotFailed {\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n\n        require(\n            unstakeUser.lastUnstakeTimestamp < block.timestamp - UNSTAKE_DELAY,\n            \"ANTE: must wait 24 hours to withdraw stake\"\n        );\n        require(unstakeUser.amount > 0, \"ANTE: Nothing to withdraw\");\n\n        uint256 amount = unstakeUser.amount;\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\n        unstakeUser.amount = 0;\n\n        _safeTransfer(msg.sender, amount);\n\n        emit WithdrawStake(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function cancelPendingWithdraw() external override testNotFailed {\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n\n        require(unstakeUser.amount > 0, \"ANTE: No pending withdraw balance\");\n        uint256 amount = unstakeUser.amount;\n        unstakeUser.amount = 0;\n\n        updateDecay();\n\n        UserInfo storage user = stakingInfo.userInfo[msg.sender];\n        if (user.startAmount > 0) {\n            user.startAmount = amount.add(_storedBalance(user, stakingInfo));\n        } else {\n            user.startAmount = amount;\n            stakingInfo.numUsers = stakingInfo.numUsers.add(1);\n        }\n        stakingInfo.totalAmount = stakingInfo.totalAmount.add(amount);\n        user.startDecayMultiplier = stakingInfo.decayMultiplier;\n\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\n\n        emit CancelWithdraw(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function checkTest() external override testNotFailed {\n        require(challengers.exists(msg.sender), \"ANTE: Only challengers can checkTest\");\n        require(\n            block.number.sub(eligibilityInfo.lastStakedBlock[msg.sender]) > CHALLENGER_BLOCK_DELAY,\n            \"ANTE: must wait 12 blocks after challenging to call checkTest\"\n        );\n\n        numTimesVerified = numTimesVerified.add(1);\n        lastVerifiedBlock = block.number;\n        emit TestChecked(msg.sender);\n        if (!_checkTestNoRevert()) {\n            updateDecay();\n            verifier = msg.sender;\n            failedBlock = block.number;\n            pendingFailure = true;\n\n            _calculateChallengerEligibility();\n            _bounty = getVerifierBounty();\n\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n            _remainingStake = totalStake.sub(_bounty);\n\n            emit FailureOccurred(msg.sender);\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function claim() external override {\n        require(pendingFailure, \"ANTE: Test has not failed\");\n\n        UserInfo storage user = challengerInfo.userInfo[msg.sender];\n        require(user.startAmount > 0, \"ANTE: No Challenger Staking balance\");\n\n        uint256 amount = _calculateChallengerPayout(user, msg.sender);\n        \/\/ Zero out the user so they can't claim again.\n        user.startAmount = 0;\n\n        numPaidOut = numPaidOut.add(1);\n        totalPaidOut = totalPaidOut.add(amount);\n\n        _safeTransfer(msg.sender, amount);\n        emit ClaimPaid(msg.sender, amount);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function updateDecay() public override {\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\n\n        lastUpdateBlock = block.number;\n\n        if (decayThisUpdate == 0) return;\n\n        uint256 totalStaked = stakingInfo.totalAmount;\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\n\n        \/\/ update totoal accrued decay amounts for challengers\n        \/\/ decayMultiplier for challengers = decayMultiplier for challengers * decayMultiplierThisUpdate\n        \/\/ totalChallengerStaked = totalChallengerStaked - decayThisUpdate\n        challengerInfo.decayMultiplier = challengerInfo.decayMultiplier.mulDiv(decayMultiplierThisUpdate, ONE);\n        challengerInfo.totalAmount = totalChallengerStaked.sub(decayThisUpdate);\n\n        \/\/ Update the new accrued decay amounts for stakers.\n        \/\/   totalStaked_new = totalStaked_old + decayThisUpdate\n        \/\/   decayMultipilerThisUpdate = totalStaked_new \/ totalStaked_old\n        \/\/   decayMultiplier_staker = decayMultiplier_staker * decayMultiplierThisUpdate\n        uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\n\n        stakingInfo.decayMultiplier = stakingInfo.decayMultiplier.mulDiv(totalStakedNew, totalStaked);\n        stakingInfo.totalAmount = totalStakedNew;\n    }\n\n    \/*****************************************************\n     * ================ VIEW FUNCTIONS ================= *\n     *****************************************************\/\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalChallengerStaked() external view override returns (uint256) {\n        return challengerInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalStaked() external view override returns (uint256) {\n        return stakingInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalPendingWithdraw() external view override returns (uint256) {\n        return withdrawInfo.totalAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getTotalChallengerEligibleBalance() external view override returns (uint256) {\n        return eligibilityInfo.eligibleAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getChallengerPayout(address challenger) external view override returns (uint256) {\n        UserInfo storage user = challengerInfo.userInfo[challenger];\n        require(user.startAmount > 0, \"ANTE: No Challenger Staking balance\");\n\n        \/\/ If called before test failure returns an estimate\n        if (pendingFailure) {\n            return _calculateChallengerPayout(user, challenger);\n        } else {\n            uint256 amount = _storedBalance(user, challengerInfo);\n            uint256 bounty = getVerifierBounty();\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n\n            return amount.add(amount.mulDiv(totalStake.sub(bounty), challengerInfo.totalAmount));\n        }\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getStoredBalance(address _user, bool isChallenger) external view override returns (uint256) {\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\n\n        UserInfo storage user = isChallenger ? challengerInfo.userInfo[_user] : stakingInfo.userInfo[_user];\n\n        if (user.startAmount == 0) return 0;\n\n        require(user.startDecayMultiplier > 0, \"ANTE: Invalid startDecayMultiplier\");\n\n        uint256 decayMultiplier;\n\n        if (isChallenger) {\n            decayMultiplier = challengerInfo.decayMultiplier.mul(decayMultiplierThisUpdate).div(1e18);\n        } else {\n            uint256 totalStaked = stakingInfo.totalAmount;\n            uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\n            decayMultiplier = stakingInfo.decayMultiplier.mul(totalStakedNew).div(totalStaked);\n        }\n\n        return user.startAmount.mulDiv(decayMultiplier, user.startDecayMultiplier);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getPendingWithdrawAmount(address _user) external view override returns (uint256) {\n        return withdrawInfo.userUnstakeInfo[_user].amount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getPendingWithdrawAllowedTime(address _user) external view override returns (uint256) {\n        UserUnstakeInfo storage user = withdrawInfo.userUnstakeInfo[_user];\n        require(user.amount > 0, \"ANTE: nothing to withdraw\");\n\n        return user.lastUnstakeTimestamp.add(UNSTAKE_DELAY);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getCheckTestAllowedBlock(address _user) external view override returns (uint256) {\n        return eligibilityInfo.lastStakedBlock[_user].add(CHALLENGER_BLOCK_DELAY);\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getUserStartAmount(address _user, bool isChallenger) external view override returns (uint256) {\n        return isChallenger ? challengerInfo.userInfo[_user].startAmount : stakingInfo.userInfo[_user].startAmount;\n    }\n\n    \/\/\/ @inheritdoc IAntePool\n    function getVerifierBounty() public view override returns (uint256) {\n        uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\n        return totalStake.mul(VERIFIER_BOUNTY).div(100);\n    }\n\n    \/*****************************************************\n     * =============== INTERNAL HELPERS ================ *\n     *****************************************************\/\n\n    \/\/\/ @notice Internal function activating the unstaking action for staker or challengers\n    \/\/\/ @param amount Amount to be removed in wei\n    \/\/\/ @param isChallenger True if user is a challenger\n    \/\/\/ @param side Corresponding staker or challenger pool info\n    \/\/\/ @param user Info related to the user\n    \/\/\/ @dev If the user is a challenger the function the amount can be withdrawn\n    \/\/\/ immediately, if the user is a staker, the amount is moved to the withdraw\n    \/\/\/ info and then the 24 hour waiting period starts\n    function _unstake(\n        uint256 amount,\n        bool isChallenger,\n        PoolSideInfo storage side,\n        UserInfo storage user\n    ) internal {\n        \/\/ Calculate how much the user has available to unstake, including the\n        \/\/ effects of any previously accrued decay.\n        \/\/   prevAmount = startAmount * decayMultiplier \/ startDecayMultiplier\n        uint256 prevAmount = _storedBalance(user, side);\n\n        if (prevAmount == amount) {\n            user.startAmount = 0;\n            user.startDecayMultiplier = 0;\n            side.numUsers = side.numUsers.sub(1);\n\n            \/\/ Remove from set of existing challengers\n            if (isChallenger) challengers.remove(msg.sender);\n        } else {\n            require(amount <= prevAmount, \"ANTE: Withdraw request exceeds balance.\");\n            user.startAmount = prevAmount.sub(amount);\n            \/\/ Reset the startDecayMultiplier for this user, since we've updated\n            \/\/ the startAmount to include any already-accrued decay.\n            user.startDecayMultiplier = side.decayMultiplier;\n        }\n        side.totalAmount = side.totalAmount.sub(amount);\n\n        if (isChallenger) _safeTransfer(msg.sender, amount);\n        else {\n            \/\/ Just initiate the withdraw if staker\n            UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\n            unstakeUser.lastUnstakeTimestamp = block.timestamp;\n            unstakeUser.amount = unstakeUser.amount.add(amount);\n\n            withdrawInfo.totalAmount = withdrawInfo.totalAmount.add(amount);\n        }\n\n        emit Unstake(msg.sender, amount, isChallenger);\n    }\n\n    \/\/\/ @notice Computes the decay differences for staker and challenger pools\n    \/\/\/ @dev Function shared by getStoredBalance view function and internal\n    \/\/\/ decay computation\n    \/\/\/ @return decayMultiplierThisUpdate multiplier factor for this decay change\n    \/\/\/ @return decayThisUpdate amount of challenger value that's decayed in wei\n    function _computeDecay() internal view returns (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) {\n        decayThisUpdate = 0;\n        decayMultiplierThisUpdate = ONE;\n\n        if (block.number <= lastUpdateBlock) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n        \/\/ Stop charging decay if the test already failed.\n        if (pendingFailure) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n        \/\/ If we have no stakers or challengers, don't charge any decay.\n        uint256 totalStaked = stakingInfo.totalAmount;\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\n        if (totalStaked == 0 || totalChallengerStaked == 0) {\n            return (decayMultiplierThisUpdate, decayThisUpdate);\n        }\n\n        uint256 numBlocks = block.number.sub(lastUpdateBlock);\n\n        \/\/ The rest of the function updates the new accrued decay amounts\n        \/\/   decayRateThisUpdate = DECAY_RATE_PER_BLOCK * numBlocks\n        \/\/   decayMultiplierThisUpdate = 1 - decayRateThisUpdate\n        \/\/   decayThisUpdate = totalChallengerStaked * decayRateThisUpdate\n        uint256 decayRateThisUpdate = DECAY_RATE_PER_BLOCK.mul(numBlocks);\n\n        \/\/ Failsafe to avoid underflow when calculating decayMultiplierThisUpdate\n        if (decayRateThisUpdate >= ONE) {\n            decayMultiplierThisUpdate = 0;\n            decayThisUpdate = totalChallengerStaked;\n        } else {\n            decayMultiplierThisUpdate = ONE.sub(decayRateThisUpdate);\n            decayThisUpdate = totalChallengerStaked.mulDiv(decayRateThisUpdate, ONE);\n        }\n    }\n\n    \/\/\/ @notice Calculates total amount of challenger capital eligible for payout.\n    \/\/\/ @dev Any challenger which stakes within 12 blocks prior to test failure\n    \/\/\/ will not get a payout but will be able to withdraw their capital\n    \/\/\/ (minus decay)\n    function _calculateChallengerEligibility() internal {\n        uint256 cutoffBlock = failedBlock.sub(CHALLENGER_BLOCK_DELAY);\n        for (uint256 i = 0; i < challengers.addresses.length; i++) {\n            address challenger = challengers.addresses[i];\n            if (eligibilityInfo.lastStakedBlock[challenger] < cutoffBlock) {\n                eligibilityInfo.eligibleAmount = eligibilityInfo.eligibleAmount.add(\n                    _storedBalance(challengerInfo.userInfo[challenger], challengerInfo)\n                );\n            }\n        }\n    }\n\n    \/\/\/ @notice Checks the connected Ante Test, also returns false if checkTestPasses reverts\n    \/\/\/ @return passes bool if the Ante Test passed\n    function _checkTestNoRevert() internal returns (bool) {\n        try anteTest.checkTestPasses() returns (bool passes) {\n            return passes;\n        } catch {\n            return false;\n        }\n    }\n\n    \/\/\/ @notice Calculates individual challenger payout\n    \/\/\/ @param user UserInfo for specified challenger\n    \/\/\/ @param challenger Address of challenger\n    \/\/\/ @dev This is only called after a test is failed, so it's calculated payouts\n    \/\/\/ are no longer estimates\n    \/\/\/ @return Payout amount for challenger in wei\n    function _calculateChallengerPayout(UserInfo storage user, address challenger) internal view returns (uint256) {\n        \/\/ Calculate this user's challenging balance.\n        uint256 amount = _storedBalance(user, challengerInfo);\n        \/\/ Calculate how much of the staking pool this user gets, and add that\n        \/\/ to the user's challenging balance.\n        if (eligibilityInfo.lastStakedBlock[challenger] < failedBlock.sub(CHALLENGER_BLOCK_DELAY)) {\n            amount = amount.add(amount.mulDiv(_remainingStake, eligibilityInfo.eligibleAmount));\n        }\n\n        return challenger == verifier ? amount.add(_bounty) : amount;\n    }\n\n    \/\/\/ @notice Get the stored balance held by user, including accrued decay\n    \/\/\/ @param user UserInfo of specified user\n    \/\/\/ @param side PoolSideInfo of where the user is located, either staker or challenger side\n    \/\/\/ @dev This includes accrued decay up to `lastUpdateBlock`\n    \/\/\/ @return Balance of the user in wei\n    function _storedBalance(UserInfo storage user, PoolSideInfo storage side) internal view returns (uint256) {\n        if (user.startAmount == 0) return 0;\n\n        require(user.startDecayMultiplier > 0, \"ANTE: Invalid startDecayMultiplier\");\n        return user.startAmount.mulDiv(side.decayMultiplier, user.startDecayMultiplier);\n    }\n\n    \/\/\/ @notice Transfer function for moving funds\n    \/\/\/ @param to Address to transfer funds to\n    \/\/\/ @param amount Amount to be transferred in wei\n    \/\/\/ @dev Safe transfer function, just in case a rounding error causes the\n    \/\/\/ pool to not have enough ETH\n    function _safeTransfer(address payable to, uint256 amount) internal {\n        to.transfer(_min(amount, address(this).balance));\n    }\n\n    \/\/\/ @notice Returns the minimum of 2 parameters\n    \/\/\/ @param a Value A\n    \/\/\/ @param b Value B\n    \/\/\/ @return Lower of a or b\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    \/\/\/ @notice Checks if the test has not failed yet\n    function _testNotFailed() internal {\n        require(!pendingFailure, \"ANTE: Test already failed.\");\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.8.0;\n\nimport \"..\/libraries\/ante-v06-core\/AnteTest.sol\";\nimport \"..\/libraries\/ante-v06-core\/interfaces\/IAntePool.sol\";\n\n\/\/\/ @title Ante Pool contract cannot pay out if test has not failed\n\/\/\/ @notice Connects to deployed Ante Pools to test them\ncontract AntePoolPostFailPayoutTest is AnteTest(\"Ante Pool cannot pay out before failure\") {\n    \/\/\/ @param _testedContracts array of Ante Pools to check\n    constructor(address[] memory _testedContracts) {\n        testedContracts = _testedContracts;\n        protocolName = \"Ante\";\n    }\n\n    \/\/\/ @notice test checks that payouts do not happen before failure\n    \/\/\/ @return true if no payouts have happened on unfailed tests\n    function checkTestPasses() public view override returns (bool) {\n        for (uint256 i = 0; i < testedContracts.length; i++) {\n            IAntePool pool = IAntePool(testedContracts[i]);\n            if (pool.pendingFailure()) continue;\n            if (pool.numPaidOut() > 0) return false;\n            if (pool.totalPaidOut() > 0) return false;\n        }\n        return true;\n    }\n}\n END"}
{"prompt":"Ensure that a MetaStreet Vault's Junior Tranche is solvent. Checks that realized value is greater than pending redemptions for the junior tranche of the MetaStreet Avatar-DAI vault\n\n\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \".\/IBeacon.sol\";\nimport \"..\/Proxy.sol\";\nimport \"..\/ERC1967\/ERC1967Upgrade.sol\";\n\n\/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n *\/\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    \/**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     *\/\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    \/**\n     * @dev Returns the current beacon address.\n     *\/\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    \/**\n     * @dev Returns the current implementation address of the associated beacon.\n     *\/\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    \/**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     *\/\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}","completion":" MIT\n\npragma solidity ^0.8.0;\n\nimport \"..\/AnteTest.sol\";\n\ninterface IVaultAbridged {\n    enum TrancheId {\n        Senior,\n        Junior\n    }\n\n    function trancheState(TrancheId trancheId)\n        external\n        view\n        returns (\n            uint256 realizedValue,\n            uint256 estimatedValue,\n            uint256 pendingRedemptions,\n            uint256 redemptionQueue,\n            uint256 processedRedemptionQueue,\n            uint256 depositSharePrice,\n            uint256 redemptionSharePrice_\n        );\n}\n\n\/\/ @title MetaStreet Vault Junior Tranche Solvency Test\n\/\/ @notice Ante Test to check if a MetaStreet Vault's junior tranche is solvent\ncontract AnteMetaStreetVaultSolvencyTest is AnteTest(\"Ensure that a MetaStreet Vault's Junior Tranche is solvent\") {\n    IVaultAbridged private vault;\n\n    constructor(address _vault) {\n        protocolName = \"MetaStreet\";\n        testedContracts.push(_vault);\n\n        vault = IVaultAbridged(_vault);\n    }\n\n    \/\/ @notice Check if a Vault's junior tranche is solvent\n    \/\/ @return true if Vault's junior tranche is solvent, otherwise false\n    function checkTestPasses() external view override returns (bool) {\n        (uint256 realizedValue, , uint256 pendingRedemptions, , , , ) = vault.trancheState(\n            IVaultAbridged.TrancheId.Junior\n        );\n\n        return realizedValue >= pendingRedemptions;\n    }\n}\n END"}
{"prompt":"MetaStreet General-WETH Vault's Junior Tranche is solvent. Checks that realized value is greater than pending redemptions for the junior tranche of the MetaStreet General-WETH vault\n\n\n\nContract to be tested:\n\/\/ SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \".\/IBeacon.sol\";\nimport \"..\/Proxy.sol\";\nimport \"..\/ERC1967\/ERC1967Upgrade.sol\";\n\n\/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n *\/\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    \/**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     *\/\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    \/**\n     * @dev Returns the current beacon address.\n     *\/\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    \/**\n     * @dev Returns the current implementation address of the associated beacon.\n     *\/\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    \/**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     *\/\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}","completion":" MIT\n\npragma solidity ^0.8.0;\n\nimport \"..\/AnteTest.sol\";\n\ninterface IVaultAbridged {\n    enum TrancheId {\n        Senior,\n        Junior\n    }\n\n    function trancheState(TrancheId trancheId)\n        external\n        view\n        returns (\n            uint256 realizedValue,\n            uint256 estimatedValue,\n            uint256 pendingRedemptions,\n            uint256 redemptionQueue,\n            uint256 processedRedemptionQueue,\n            uint256 depositSharePrice,\n            uint256 redemptionSharePrice_\n        );\n}\n\n\/\/ @title MetaStreet Vault Junior Tranche Solvency Test\n\/\/ @notice Ante Test to check if a MetaStreet Vault's junior tranche is solvent\ncontract AnteMetaStreetVaultSolvencyTest is AnteTest(\"MetaStreet General-WETH Vault's Junior Tranche is solvent\") {\n    IVaultAbridged private vault;\n\n    constructor(address _vault) {\n        protocolName = \"MetaStreet\";\n        testedContracts.push(_vault);\n\n        vault = IVaultAbridged(_vault);\n    }\n\n    \/\/ @notice Check if a Vault's junior tranche is solvent\n    \/\/ @return true if Vault's junior tranche is solvent, otherwise false\n    function checkTestPasses() external view override returns (bool) {\n        (uint256 realizedValue, , uint256 pendingRedemptions, , , , ) = vault.trancheState(\n            IVaultAbridged.TrancheId.Junior\n        );\n\n        return realizedValue >= pendingRedemptions;\n    }\n} END"}
{"prompt":"LlamaPay never pays future payments early (lastPayerUpdate[anyone] <= block.timestamp)\n\nContract to be tested:\n\/\/SPDX-License-Identifier: None\npragma solidity ^0.8.0;\n\nimport {LlamaPay} from \".\/LlamaPay.sol\";\n\n\ncontract LlamaPayFactory {\n    bytes32 constant INIT_CODEHASH = keccak256(type(LlamaPay).creationCode);\n\n    address public parameter;\n    uint256 public getLlamaPayContractCount;\n    address[1000000000] public getLlamaPayContractByIndex; \/\/ 1 billion indices\n\n    event LlamaPayCreated(address token, address llamaPay);\n\n    \/**\n        @notice Create a new Llama Pay Streaming instance for `_token`\n        @dev Instances are created deterministically via CREATE2 and duplicate\n            instances will cause a revert\n        @param _token The ERC20 token address for which a Llama Pay contract should be deployed\n        @return llamaPayContract The address of the newly created Llama Pay contract\n      *\/\n    function createLlamaPayContract(address _token) external returns (address llamaPayContract) {\n        \/\/ set the parameter storage slot so the contract can query it\n        parameter = _token;\n        \/\/ use CREATE2 so we can get a deterministic address based on the token\n        llamaPayContract = address(new LlamaPay{salt: bytes32(uint256(uint160(_token)))}());\n        \/\/ CREATE2 can return address(0), add a check to verify this isn't the case\n        \/\/ See: https:\/\/eips.ethereum.org\/EIPS\/eip-1014\n        require(llamaPayContract != address(0));\n\n        \/\/ Append the new contract address to the array of deployed contracts\n        uint256 index = getLlamaPayContractCount;\n        getLlamaPayContractByIndex[index] = llamaPayContract;\n        unchecked{\n            getLlamaPayContractCount = index + 1;\n        }\n\n        emit LlamaPayCreated(_token, llamaPayContract);\n    }\n\n    \/**\n      @notice Query the address of the Llama Pay contract for `_token` and whether it is deployed\n      @param _token An ERC20 token address\n      @return predictedAddress The deterministic address where the llama pay contract will be deployed for `_token`\n      @return isDeployed Boolean denoting whether the contract is currently deployed\n      *\/\n    function getLlamaPayContractByToken(address _token) external view returns(address predictedAddress, bool isDeployed){\n        predictedAddress = address(uint160(uint256(keccak256(abi.encodePacked(\n            bytes1(0xff),\n            address(this),\n            bytes32(uint256(uint160(_token))),\n            INIT_CODEHASH\n        )))));\n        isDeployed = predictedAddress.code.length != 0;\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\/\/ Uses the setTokenAddress and setPayerAddress functions to set the addresses\n\/\/ of the LlamaPay instance(s) and payer address to check\n\/\/ https:\/\/.etherscan.io\/address\/[CONTRACT_ADDRESS]#readContract to check values\n\/\/ https:\/\/.etherscan.io\/address\/[CONTRACT_ADDRESS]#writeContract to set values\n\n\/\/ NOTE: As of May 2022, a challenger attempting to check this test via web app\n\/\/ or interacting with the AntePool directly can potentially be front-run. In\n\/\/ order to avoid being front-run, a potential challenger should deploy an\n\/\/ instance of the AnteLlamaPayTestChallengerWrapper.sol contract and use that\n\/\/ to challenge the Ante Pool. Staking functions can be done normally through\n\/\/ the web app or directly interacting with the AntePool contract.\n\/\/ https:\/\/github.com\/antefinance\/ante-community-tests\/blob\/main\/contracts\/llamapay\/AnteLlamaPayTestChallengerWrapper.sol\n\npragma solidity ^0.7.0;\n\nimport \"..\/libraries\/ante-v05-core\/AnteTest.sol\";\n\ninterface ILlamaPayFactory {\n    function getLlamaPayContractByToken(address _token) external view returns (address, bool);\n}\n\ninterface ILlamaPay {\n    function payers(address _payer) external view returns (uint40, uint216);\n}\n\n\/\/\/ @title  LlamaPay never goes backwards in time test\n\/\/\/ @notice Ante Test to check that lastPayerUpdate <= block.timestamp holds\n\/\/\/         for any LlamaPay payer\/token. Uses the setter functions provided to\n\/\/\/         set the LlamaPay instance and payer to check.\n\/\/\/         Note: may no longer hold after 231,800 A.D. due to holding timestamp in uint40\ncontract AnteLlamaPayTest is\n    AnteTest(\"LlamaPay never pays future payments early (lastPayerUpdate[anyone] <= block.timestamp)\")\n{\n    \/\/ https:\/\/etherscan.io\/address\/0xde1C04855c2828431ba637675B6929A684f84C7F on Eth Mainnet\n    ILlamaPayFactory internal factory;\n\n    address public tokenAddress;\n    address public payerAddress;\n\n    constructor(address _llamaPayFactoryAddress) {\n        factory = ILlamaPayFactory(_llamaPayFactoryAddress);\n\n        protocolName = \"LlamaPay\"; \/\/ <3\n        testedContracts.push(_llamaPayFactoryAddress);\n        testedContracts.push(address(0)); \/\/ LlamaPay instance once set\n    }\n\n    \/\/\/ @notice Checks that lastPayerUpdate[payer] <= block.timestamp for a\n    \/\/\/         given payer and LlamaPay instance. Uses the setter functions\n    \/\/\/         provided to set the token address and payer address to check.\n    \/\/\/ @return true if lastPayerUpdate[payer] <= block.timestamp for the\n    \/\/\/         LlamaPay instance and payer checked\n    function checkTestPasses() external view override returns (bool) {\n        \/\/ If a valid LlamaPay instance is specified, check it\n        (address predictedAddress, bool isDeployed) = factory.getLlamaPayContractByToken(tokenAddress);\n        if (isDeployed) {\n            (uint40 lastPayerUpdate, ) = ILlamaPay(predictedAddress).payers(payerAddress);\n\n            \/\/ We don't need to worry about checking if the payer exists in the\n            \/\/ payer mapping for this LlamaPay instance since 0 < block.timestamp\n            return (lastPayerUpdate <= block.timestamp);\n        }\n\n        \/\/ If invalid LlamaPay address passed in, test will still pass\n        return true;\n    }\n\n    \/*****************************************************\n     * ================ USER INTERFACE ================= *\n     *****************************************************\/\n\n    \/\/\/ @notice Sets the payer address for the Ante Test to check\n    \/\/\/ @param  _payerAddress address of payer to check\n    function setPayerAddress(address _payerAddress) external {\n        \/\/ Could check that valid payer mapping exists, but also, an invalid\n        \/\/ payer address doesn't fail the test so no risk of false positive.\n        payerAddress = _payerAddress;\n    }\n\n    \/\/\/ @notice Sets the token address of the LlamaPay instance to check\n    \/\/\/ @param  _tokenAddress address of token to check LlamaPay instance for\n    function setTokenAddress(address _tokenAddress) external {\n        \/\/ Check that LlamaPay instance exists for the token\n        (address predictedAddress, bool isDeployed) = factory.getLlamaPayContractByToken(_tokenAddress);\n        require(isDeployed, \"ANTE: LlamaPay instance not deployed for that token\");\n        testedContracts[1] = predictedAddress;\n        tokenAddress = _tokenAddress;\n    }\n} END"}
{"prompt":"Checks WETH9 issued WETH fully backed by ETH\n\nContract to be tested:\npragma solidity ^0.4.18;\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\";\nimport \"..\/AnteTest.sol\";\n\n\/\/\/ @title WETH9 issued fully backed by ETH test\n\/\/\/ @notice Ante Test to check WETH9 minted WETH matches deposited ETH in contract\ncontract AnteWETH9Test is AnteTest(\"Checks WETH9 issued WETH fully backed by ETH\") {\n    \/\/ https:\/\/etherscan.io\/address\/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    address public immutable wETH9Addr;\n\n    IERC20 public wETH9Token;\n\n    \/\/\/ @param _wETH9Addr WETH9 contract address (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 on mainnet)\n    constructor(address _wETH9Addr) {\n        wETH9Addr = _wETH9Addr;\n        wETH9Token = IERC20(_wETH9Addr);\n\n        protocolName = \"WETH9\";\n        testedContracts = [_wETH9Addr];\n    }\n\n    \/\/\/ @notice test to check WETH token supply against contract balance\n    \/\/\/ @return true if WETH9 token supply equals contract balance\n    function checkTestPasses() external view override returns (bool) {\n        return address(wETH9Token).balance == wETH9Token.totalSupply();\n    }\n} END"}
{"prompt":"Wrapped BTC (WBTC) supply doesn't exceed 21m\n\nContract to be tested:\npragma solidity 0.4.24;\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/ERC20Basic.sol\n\n\/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https:\/\/github.com\/ethereum\/EIPs\/issues\/179\n *\/\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/math\/SafeMath.sol\n\n\/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n *\/\nlibrary SafeMath {\n\n  \/**\n  * @dev Multiplies two numbers, throws on overflow.\n  *\/\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    \/\/ Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    \/\/ benefit is lost if 'b' is also tested.\n    \/\/ See: https:\/\/github.com\/OpenZeppelin\/openzeppelin-solidity\/pull\/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c \/ _a == _b);\n    return c;\n  }\n\n  \/**\n  * @dev Integer division of two numbers, truncating the quotient.\n  *\/\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    \/\/ assert(_b > 0); \/\/ Solidity automatically throws when dividing by 0\n    \/\/ uint256 c = _a \/ _b;\n    \/\/ assert(_a == _b * c + _a % _b); \/\/ There is no case in which this doesn't hold\n    return _a \/ _b;\n  }\n\n  \/**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  *\/\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  \/**\n  * @dev Adds two numbers, throws on overflow.\n  *\/\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/BasicToken.sol\n\n\/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n *\/\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  \/**\n  * @dev Total number of tokens in existence\n  *\/\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  \/**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  *\/\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  \/**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  *\/\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/ERC20.sol\n\n\/**\n * @title ERC20 interface\n * @dev see https:\/\/github.com\/ethereum\/EIPs\/issues\/20\n *\/\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/StandardToken.sol\n\n\/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https:\/\/github.com\/ethereum\/EIPs\/issues\/20\n * Based on code by FirstBlood: https:\/\/github.com\/Firstbloodio\/token\/blob\/master\/smart_contract\/FirstBloodToken.sol\n *\/\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  \/**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   *\/\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  \/**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https:\/\/github.com\/ethereum\/EIPs\/issues\/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   *\/\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  \/**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   *\/\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  \/**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   *\/\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  \/**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   *\/\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/DetailedERC20.sol\n\n\/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n *\/\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/ownership\/Ownable.sol\n\n\/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n *\/\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  \/**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   *\/\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  \/**\n   * @dev Throws if called by any account other than the owner.\n   *\/\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  \/**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   *\/\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  \/**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   *\/\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  \/**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   *\/\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/MintableToken.sol\n\n\/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https:\/\/github.com\/TokenMarketNet\/ico\/blob\/master\/contracts\/MintableToken.sol\n *\/\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  \/**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   *\/\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  \/**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   *\/\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/BurnableToken.sol\n\n\/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n *\/\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  \/**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   *\/\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    \/\/ no need to require value <= totalSupply, since that would imply the\n    \/\/ sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/lifecycle\/Pausable.sol\n\n\/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n *\/\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  \/**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   *\/\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  \/**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   *\/\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  \/**\n   * @dev called by the owner to pause, triggers stopped state\n   *\/\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  \/**\n   * @dev called by the owner to unpause, returns to normal state\n   *\/\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/PausableToken.sol\n\n\/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **\/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/ownership\/Claimable.sol\n\n\/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n *\/\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  \/**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   *\/\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  \/**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   *\/\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  \/**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   *\/\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/token\/ERC20\/SafeERC20.sol\n\n\/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n *\/\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n\/\/ File: openzeppelin-solidity\/contracts\/ownership\/CanReclaimToken.sol\n\n\/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n *\/\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  \/**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   *\/\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n\/\/ File: contracts\/utils\/OwnableContract.sol\n\n\/\/ empty block is used as this contract just inherits others.\ncontract OwnableContract is CanReclaimToken, Claimable { } \/* solhint-disable-line no-empty-blocks *\/\n\n\/\/ File: contracts\/token\/WBTC.sol\n\ncontract WBTC is StandardToken, DetailedERC20(\"Wrapped BTC\", \"WBTC\", 8),\n    MintableToken, BurnableToken, PausableToken, OwnableContract {\n\n    function burn(uint value) public onlyOwner {\n        super.burn(value);\n    }\n\n    function finishMinting() public onlyOwner returns (bool) {\n        return false;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        revert(\"renouncing ownership is blocked\");\n    }\n}","completion":" GPL-3.0-only\n\n\/\/ ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n\/\/ ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n\/\/ ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n\/\/ ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\/\/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\";\nimport \"..\/AnteTest.sol\";\n\n\/\/\/ @title WBTC supply never exceeds 21 million test\n\/\/\/ @notice Ante Test to check that WBTC supply is always less than 21 million\ncontract AnteWBTCSupplyTest is AnteTest(\"Wrapped BTC (WBTC) supply doesn't exceed 21m\") {\n    \/\/ https:\/\/etherscan.io\/address\/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599#code\n    address public immutable wBTCAddr;\n\n    \/\/21 million * 1e8 (for decimals), maximum total Bitcoin supply\n    uint256 public constant THRESHOLD_SUPPLY = 21 * 1000 * 1000 * 1e8;\n\n    IERC20 public wBTCToken;\n\n    \/\/\/ @param _wBTCAddr WBTC contract address (0x2260fac5e5542a773aa44fbcfedf7c193bc2c599 on mainnet)\n    constructor(address _wBTCAddr) {\n        protocolName = \"WBTC\";\n        testedContracts = [_wBTCAddr];\n\n        wBTCAddr = _wBTCAddr;\n        wBTCToken = IERC20(_wBTCAddr);\n    }\n\n    \/\/\/ @notice test to check WBTC token supply\n    \/\/\/ @return true if WBTC supply is less than 21 million\n    function checkTestPasses() external view override returns (bool) {\n        return (wBTCToken.totalSupply() <= THRESHOLD_SUPPLY);\n    }\n}\n END"}
